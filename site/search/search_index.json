{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"index.html","title":"Welcome to this documentation project","text":"<p>This is a humble project documenting mildly intresting configurations of common utilities, mainly on Debian.</p> <ul> <li> <p> Linux</p> <p>This is the bulk of the content, describing common applications like mail or web.</p> </li> <li> <p> Windows</p> <p>Some quality of life enhancements for Windows clients, like the Yubikey.</p> </li> <li> <p> Miscelandious</p> <p>Concepts and services worth mentionning, like markdown and GitHub.</p> </li> </ul>"},{"location":"linux/index.html","title":"Linux","text":"<ul> <li> <p> Mail</p> <p>Guides regarding mail handling, reading and signing.</p> </li> <li> <p> Monitoring</p> <p>Guides for tools reguarding monitoring and backing up the system.</p> </li> </ul>"},{"location":"linux/mail/index.html","title":"Mail","text":"<ul> <li> <p>DMARC</p> <p>How to set up DMARC for your mail server.</p> </li> </ul>"},{"location":"linux/mail/dmarc.html","title":"DMARC","text":"<p>How to setup DMARC to use with Exim4. </p>"},{"location":"linux/mail/dmarc.html#sources","title":"Sources","text":""},{"location":"linux/mail/dmarc.html#spf","title":"SPF","text":"<ul> <li>My own brain</li> </ul>"},{"location":"linux/mail/dmarc.html#dkim","title":"DKIM","text":"<ul> <li>Exim</li> <li>transip</li> <li>Dev Galaxy - Bind bind.keys problem</li> </ul>"},{"location":"linux/mail/dmarc.html#dmarc","title":"DMARC","text":"<ul> <li>Google Workspace Admin Help</li> </ul>"},{"location":"linux/mail/dmarc.html#requirements","title":"Requirements","text":"<ul> <li>Openssl</li> <li>Exim4</li> <li>Configured Bind9</li> </ul>"},{"location":"linux/mail/dmarc.html#guide","title":"Guide","text":""},{"location":"linux/mail/dmarc.html#spf_1","title":"SPF","text":"<p>Add the following to your Bind configuration:</p> <pre><code>TXT \"v=spf1 ip4:&lt;x.x.x.x&gt; include:&lt;secondarymx.com&gt; -all\"\n</code></pre> <p>Don't forget to increment the serial</p> <p>Restart Bind.</p>"},{"location":"linux/mail/dmarc.html#dkim_1","title":"DKIM","text":"<p>Genrate a key and export it in a format suitable for DNS records:</p> <pre><code>openssl genpkey -algorithm ed25519 -out dkim-ed25519.private\nopenssl pkey -outform DER -pubout -in dkim-ed25519.private | tail -c +13 | base64\n</code></pre> <p>Some clients, like Google, still don't support eliptic curves at the time of writing.</p> <p>You can generate an RSA key instead or better yet, generate both.</p> <p>In the Exim configuration, in the transport section in <code>remote_smtp</code> (customize <code>domain.com</code>):</p> <pre><code>  dkim_domain = domain.com\n  dkim_selector = dkim-ed25519\n  dkim_private_key = /etc/exim4/dkim-ed25519.private\n</code></pre> <p>Add the DKIM field to Bind's configuration (customize <code>domain.com</code>). Replace <code>xxx</code> with the previously exported key:</p> <pre><code>dkim-ed25519._domainkey.domain.com. IN TXT \"v=DKIM1; k=ed25519; t=y; p=xxx\"\n</code></pre> <p><code>t=y</code></p> <p>This is a \"testing\" tag. Replace it with <code>t=s</code> once you have confirmed that DKIM works as intended.</p> <p>Don't forget to increment the serial</p> <p>Restart Exim and Bind.</p> managed-keys-zone: Unable to fetch DNSKEY set '.' <p>Bind stores the Root Trust Anchors in a file named bind.keys. </p> <p>For some reason, after these operations Bind might be unable to find this file.  If this error occurs, add the following to its options file:</p> /etc/bind/named.conf.options<pre><code>bindkeys-file \"/etc/bind/bind.keys\";\n</code></pre> Time to take effect <p>Remember that these changes need to go through DNS propagation and are not instantaneous.</p>"},{"location":"linux/mail/dmarc.html#dmarc_1","title":"DMARC","text":"<p>Add the DMARC field to Bind's configuration (customize omain.com`):</p> <pre><code>_dmarc.domain.com       TXT \"v=DMARC1; p=reject; rua=mailto:postmaster@domain.com\"\n</code></pre> <p>Don't forget to increment the serial</p> <p>Restart Bind. </p> Time to take effect <p>Remember that these changes need to go through DNS propagation and are not instantaneous.</p>"},{"location":"linux/monitoring/index.html","title":"Monitoring","text":"<ul> <li> <p>etckeeper</p> <p>Very easy to use facility allowing to keep /etc in a git repository.</p> </li> <li> <p> Python web graph</p> <p>A very basic python script I wrote out of boredom in uni. Draws a graph of processor, memory and storage useage mimicking the Windows Task Manager's \"Performance\" tab. </p> </li> </ul>"},{"location":"linux/monitoring/etckeeper.html","title":"etckeeper","text":"<p>Use etckeeper to store your /etc in a git reposiroty. </p>"},{"location":"linux/monitoring/etckeeper.html#sources","title":"Sources","text":"<ul> <li>etckeeper</li> </ul>"},{"location":"linux/monitoring/etckeeper.html#requirements","title":"Requirements","text":"<p>None. </p>"},{"location":"linux/monitoring/etckeeper.html#guide","title":"Guide","text":"<pre><code>apt install etckeeper\netckeeper init\ncd /etc\ngit status\n</code></pre> <p>If the last command gives you a normal output, you're ready to go. </p> <p>For more in-depth information, read the documentation, it is extremely straight-forward. </p> <p>Read the doc</p>"},{"location":"misc/index.html","title":"Miscellaneous","text":"<ul> <li> <p> Markdown</p> <p>A short introduction to markdown</p> </li> <li> <p>GitHub</p> <p>Set up GitHub on your local Linux machine to work from the command line.</p> </li> </ul>"},{"location":"misc/gh/main.html","title":"GitHub","text":"<p>Set up GitHub on your local Linux machine to work from the command line.</p>"},{"location":"misc/gh/main.html#requirements","title":"Requirements","text":"<ul> <li>A Linux client</li> <li>A GitHub account</li> </ul>"},{"location":"misc/gh/main.html#sources","title":"Sources","text":"<ul> <li>GitHub Docs</li> </ul>"},{"location":"misc/gh/main.html#guide","title":"Guide","text":"<p>This is a quick summary of Get started by GitHub. It's aim is to help you start working with a GitHub repo ASAP, not to explain Git in great detail. </p> <p>I highly recommend reading About Git and Hello World. </p> <p>GitHub CLI</p> <p>GitHub CLI offers additional functionalities for interaction with GitHub (e.g. Issues).  I do not use it at this time. However, it is required to authenticate in order to sync with GitHub repos. </p>"},{"location":"misc/gh/main.html#setup","title":"Setup","text":"Install Git<pre><code>apt install git\n</code></pre> Provide mandatory information<pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"you@example.com\"\n</code></pre> Install GitHub CLI<pre><code>type -p curl &gt;/dev/null || apt install curl -y\ncurl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \\\n&amp;&amp; chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \\\n&amp;&amp; echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\" | tee /etc/apt/sources.list.d/github-cli.list &gt; /dev/null \\\n&amp;&amp; apt update \\\n&amp;&amp; apt install gh -y\n</code></pre> Authenticate with GitHub<pre><code>gh auth login\n</code></pre> <p>Visual Studio Code</p> <p>VSCode's UI allows you to do everything we'll do here. It should also detect that you're using Git if you open the associated folder and offer Git actions in the third left menu. </p> <p>To associate with VSCode, use the following magic: <pre><code>git config --global core.editor \"code --wait\"\n</code></pre></p>"},{"location":"misc/gh/main.html#cloning-a-repo","title":"Cloning a repo","text":"<ul> <li>Go to GitHub, open the wanted repository and click on the green <code>&lt;&gt; Code</code> button. </li> <li>Select <code>HTTPS</code> and copy the URL. </li> <li>Return to your terminal, navigate to the folder you want your repo to appear and enter the clone directive:</li> </ul> <pre><code>git clone &lt;URL you copied&gt;\ncd &lt;repo name&gt;\n</code></pre>"},{"location":"misc/gh/main.html#working-with-changes","title":"Working with changes","text":"Create a branch<pre><code>git branch &lt;branch&gt;\n</code></pre> Open a branch<pre><code>git checkout &lt;branch&gt;\n</code></pre> Stage a changed file<pre><code>git add &lt;file&gt;\n</code></pre> Add staged changes into Git history<pre><code>git commit -m \"&lt;commit message&gt;\"\n</code></pre> Check current change status<pre><code>git status\n</code></pre>"},{"location":"misc/gh/main.html#interacting-with-the-remote-repo","title":"Interacting with the remote repo","text":"Synchronize local codebase with remote<pre><code>git pull &lt;remore URL&gt; &lt;branch&gt;\n</code></pre> Synchronize remote with changes made locally<pre><code>git push &lt;remote URL&gt;\n</code></pre> <p>non-fast-forward error</p> <p>If your local copy is behind the remote, you won't be able to push your changes.  In order for it to work,  <code>git pull</code> first.</p>"},{"location":"misc/md/main.html","title":"Markdown","text":"<p>What is markdown and why should you care ?</p> <p>Markdown is a lightweight markup language used to format text. Why is it better than more conventional writing applications ?</p> <p>We have 4 main apps to write text.</p> <p> notepad.exe allows you to write fast, but is unreadeable afterwards </p> <p> Word is slower (you need to use your mouse), and a bit prettier to look at</p> <p> HTML is excruciatingly painful to write, but has a good rendering</p> <p> Markdown is as fast as notepad, and renders like HTML</p> <p>Want more ? Here are some addittional arguments from the Markdown Guide.</p> <p>Markdown Guide</p> <p>You might be wondering why people use Markdown instead of a WYSIWYG editor. Why write with Markdown when you can press buttons in an interface to format your text? As it turns out, there are several reasons why people use Markdown instead of WYSIWYG editors.</p> <ul> <li> <p>Markdown can be used for everything. People use it to create websites, documents, notes, books, presentations, email messages, and technical documentation.</p> </li> <li> <p>Markdown is portable. Files containing Markdown-formatted text can be opened using virtually any application. If you decide you don\u2019t like the Markdown application you\u2019re currently using, you can import your Markdown files into another Markdown application. That\u2019s in stark contrast to word processing applications like Microsoft Word that lock your content into a proprietary file format.</p> </li> <li> <p>Markdown is platform independent. You can create Markdown-formatted text on any device running any operating system.</p> </li> <li> <p>Markdown is future proof. Even if the application you\u2019re using stops working at some point in the future, you\u2019ll still be able to read your Markdown-formatted text using a text editing application. This is an important consideration when it comes to books, university theses, and other milestone documents that need to be preserved indefinitely.</p> </li> <li> <p>Markdown is everywhere. Websites like Reddit and GitHub support Markdown, and lots of desktop and web-based applications support it.</p> </li> </ul> <p>  Read more on the markdown guide </p>"},{"location":"misc/md/main.html#how-easy-is-markdown-actually","title":"How easy is Markdown, actually ?","text":"<p>Here is an example of some source code.  </p> hello.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;\n            Hello !\n        &lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;\n            Hello !\n        &lt;/h1&gt;\n        &lt;p&gt;This is some text&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> hello.md<pre><code>---\ntitle: Hello!\n---\n\n# Hello !\n\nThis is some text\n</code></pre> <p>Without hunderds of lines of CSS, the render of the HTML would be quite ugly.</p> <p>Markdown would render just like the page you're reading now. In fact, it was written in markdown. You can read its source code by clicking the  icon at the top of the page, near the table of contents. </p>"},{"location":"misc/md/main.html#how-to-write-with-markdown","title":"How to write with markdown ?","text":"<p>Read my cheat sheet to learn virtually everything you need to know about writing in markdown in one (1) minute.</p> <p>Read the cheat sheet</p>"},{"location":"misc/md/main.html#where-to-write-with-markdown","title":"Where to write with markdown ?","text":"<p>MkDocs. If you want to publish your docs, it's MkDocs. Otherwise, you can use it literally everywhere. </p> <p>Go to the next page to learn more about MkDocs.</p>"},{"location":"misc/md/mkdocs.html","title":"MkDocs","text":"<p>Why MkDocs ?</p> <p>MkDocs is probably the fastest and easiest way to generate HTML from your notes. </p>"},{"location":"misc/md/mkdocs.html#how-to-use-mkdocs","title":"How to use MkDocs ?","text":"How to get a render in seconds<pre><code># install MkDocs\napt install mkdocs\n\n# Create a new project\nmkdocs new my-project\ncd my-project\n\n# Preview your render in real time on http://localhost:8000\nmkdocs serve\n\n# Render your finished project\nmkdocs build\n</code></pre> <p>The only other thing you need to do is to customize the config file after creating your project.</p> mkdocs.yml<pre><code>site_name: My site\nsite_url: https://mysite.com\n\nnav:\n    - My page: page.md\n    - My other page: other.md\n</code></pre> <p>That is literally it. You now have a professional-grade documentation website ready to be put online. </p>"},{"location":"misc/md/mkdocs.html#material-for-mkdocs","title":"Material for MkDocs","text":"<p>If you are wondering why didn't I put any links to the MkDocs documentation, you have the right reflexes. </p> <p>The answer is because I strongly recommend using the Material for MkDocs theme, so you should directly start learning that instead. The page you're currently looking at was rendered with this theme. </p> <p> Get started with Material for MkDocs</p>"},{"location":"misc/md/mkdocs.html#quality-of-life-enhancements","title":"Quality of life enhancements","text":"<p>If you are using  Visual Studio Code, you can add two modules that will greatly enhance your experience.</p>"},{"location":"misc/md/mkdocs.html#yaml-by-redhat","title":"YAML by RedHat","text":"<p>Download YAML by RedHat and paste the following in the JSON settings in order to have the official Material for Mkdocs debug:</p> <pre><code>{\n    \"yaml.schemas\": {\n        \"https://squidfunk.github.io/mkdocs-material/schema.json\": \"mkdocs.yml\"\n    },\n    \"yaml.customTags\": [ \n        \"!ENV scalar\",\n        \"!ENV sequence\",\n        \"tag:yaml.org,2002:python/name:material.extensions.emoji.to_svg\",\n        \"tag:yaml.org,2002:python/name:material.extensions.emoji.twemoji\",\n        \"tag:yaml.org,2002:python/name:pymdownx.superfences.fence_code_format\"\n    ]\n}\n</code></pre>"},{"location":"misc/md/mkdocs.html#todo-highlight-v2","title":"TODO Highlight v2","text":"<p>Download TODO Highlight v2 to highlight all the <code>TODO:</code> tags in my files. It's an easy way to keep in mind all the options that need to be customized befor you start writing your documentation.</p>"},{"location":"misc/md/mkdocs.html#insiders","title":"Insiders","text":"<p>If you are as hooked as me regarding Material, you will probably buy the sponsor version Insiders.  When you will need a cheet sheet with the main premium features in one place, take a look at my Material for MkDocs configuration example.</p>"},{"location":"windows/index.html","title":"Windows","text":"<ul> <li> <p> Yubikey</p> <p>A security key that enhances both security and quality of life.</p> </li> </ul>"},{"location":"windows/yubikey/index.html","title":"Yubikey","text":"<p>This section is about the Yubikey, a security key that enhances both security and quality of life. </p> <ul> <li> <p> SSH via GPG</p> <p>Guide for setting up SSH authentication with GPG keys via the Yubikey</p> </li> <li> <p> Miscellaneous</p> <p>Different commands for Yubikey personalization</p> </li> <li> <p>drduh's Yubikey guide</p> <p>Awesome guide about everything Yubikey, written by drduh</p> </li> </ul>"},{"location":"windows/yubikey/drduh.html","title":"drduh's Yubikey guide","text":"<p>This is not my work</p> <p>I copied the content of drduh's guide under the MIT licence. </p> <p>I did it because it fits perfectly my needs regarding Yubikeys and out of fear it would disappear without warning like the 3<sup>rd</sup> Epistle of Half-Life.</p> MIT licence<pre><code>The MIT License (MIT)\n\nCopyright (c) 2016 drduh\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre> <p>This is a guide to using YubiKey as a smart card for secure encryption, signature and authentication operations.</p> <p>Keys stored on YubiKey are non-exportable, unlike filesystem-based credentials, while remaining convenient for daily use. YubiKey can be configured to require a physical touch for cryptographic operations, reducing the risk of credential compromise.</p>"},{"location":"windows/yubikey/drduh.html#purchase-yubikey","title":"Purchase YubiKey","text":"<p>Current YubiKeys except the FIDO-only Security Key Series and Bio Series YubiKeys are compatible with this guide.</p> <p>Verify YubiKey by visiting yubico.com/genuine. Select Verify Device to begin the process. Touch the YubiKey when prompted and allow the site to see the make and model of the device when prompted. This device attestation may help mitigate supply chain attacks.</p> <p>Several portable storage devices (such as microSD cards) for storing encrypted backups are also recommended.</p>"},{"location":"windows/yubikey/drduh.html#prepare-environment","title":"Prepare environment","text":"<p>A dedicated, secure operating environment is recommended to generate cryptographic keys.</p> <p>The following is a general ranking of environments least to most hospitable to generating materials:</p> <ol> <li>Public, shared or other computer owned by someone else</li> <li>Daily-use personal operating system with unrestricted network access</li> <li>Virtualized operating system with limited capabilities (using virt-manager, VirtualBox or VMware, for example)</li> <li>Dedicated and hardened Debian or OpenBSD installation</li> <li>Ephemeral Debian Live or Tails booted without primary storage attached</li> <li>Hardened hardware and firmware (Coreboot, Intel ME removed)</li> <li>Air-gapped system without network capabilities, preferably ARM-based Raspberry Pi or other architecturally diverse equivalent</li> </ol> <p>Debian Live is used in this guide to balance usability and security, with some additional instructions for OpenBSD.</p> <p>Download the latest image and signature files:</p> <pre><code>curl -fLO \"https://cdimage.debian.org/debian-cd/current-live/amd64/iso-hybrid/SHA512SUMS\"\n\ncurl -fLO \"https://cdimage.debian.org/debian-cd/current-live/amd64/iso-hybrid/SHA512SUMS.sign\"\n\ncurl -fLO \"https://cdimage.debian.org/debian-cd/current-live/amd64/iso-hybrid/$(awk '/xfce.iso$/ {print $2}' SHA512SUMS)\"\n</code></pre> <p>Download the Debian signing public key:</p> <pre><code>gpg --keyserver hkps://keyring.debian.org --recv DF9B9C49EAA9298432589D76DA87E80D6294BE9B\n</code></pre> <p>If the public key cannot be received, use a different keyserver or DNS server:</p> <pre><code>gpg --keyserver hkps://keyserver.ubuntu.com:443 --recv DF9B9C49EAA9298432589D76DA87E80D6294BE9B\n</code></pre> <p>Verify the signature:</p> <pre><code>gpg --verify SHA512SUMS.sign SHA512SUMS\n</code></pre> <p><code>gpg: Good signature from \"Debian CD signing key &lt;debian-cd@lists.debian.org&gt;\"</code> must appear in the output.</p> <p>Verify the cryptographic hash of the image file matches the one in the signed file:</p> <pre><code>grep $(sha512sum debian-live-*-amd64-xfce.iso) SHA512SUMS\n</code></pre> <p>See Verifying authenticity of Debian CDs for more information.</p> <p>Connect a portable storage device and identify the disk label - this guide uses <code>/dev/sdc</code> throughout, but this value may differ on your system:</p> <p>Linux</p> <pre><code>$ sudo dmesg | tail\nusb-storage 3-2:1.0: USB Mass Storage device detected\nsd 2:0:0:0: [sdc] Attached SCSI removable disk\n</code></pre> <p>Copy the Debian image to the device:</p> <pre><code>sudo dd if=debian-live-*-amd64-xfce.iso of=/dev/sdc bs=4M status=progress ; sync\n</code></pre> <p>OpenBSD</p> <pre><code>$ dmesg | tail -n2\nsd2 at scsibus4 targ 1 lun 0: &lt;TS-RDF5, SD Transcend, TS3A&gt; SCSI4 0/direct removable serial.0000000000000\nsd2: 15193MB, 512 bytes/sector, 31116288 sectors\n\n$ doas dd if=debian-live-*-amd64-xfce.iso of=/dev/rsd2c bs=4m\n465+1 records in\n465+1 records out\n1951432704 bytes transferred in 139.125 secs (14026448 bytes/sec)\n</code></pre> <p>Power off, remove internal hard drives and all unnecessary devices, such as the wireless card.</p>"},{"location":"windows/yubikey/drduh.html#install-software","title":"Install software","text":"<p>Load the operating system and configure networking. Optional hardening steps related to networking can be found below.</p> <p>Note</p> <p>If the screen locks on Debian Live, unlock with <code>user</code> / <code>live</code></p> <p>Open terminal and install required software packages.</p> <p>Debian/Ubuntu</p> <pre><code>sudo apt update\n\nsudo apt -y upgrade\n\nsudo apt -y install \\\n  wget gnupg2 gnupg-agent dirmngr \\\n  cryptsetup scdaemon pcscd \\\n  yubikey-personalization yubikey-manager\n</code></pre> <p>OpenBSD</p> <pre><code>doas pkg_add gnupg pcsc-tools\n</code></pre> <p>macOS</p> <p>Download and install Homebrew and the following packages:</p> <pre><code>brew install \\\n  gnupg yubikey-personalization ykman pinentry-mac wget\n</code></pre> <p>Note</p> <p>An additional Python package dependency may need to be installed to use <code>ykman</code> - <code>pip install yubikey-manager</code></p> <p>NixOS</p> <p>Build an air-gapped NixOS LiveCD image:</p> <pre><code>ref=$(git ls-remote https://github.com/drduh/Yubikey-Guide refs/heads/master | awk '{print $1}')\n\nnix build --experimental-features \"nix-command flakes\" \\\n  github:drduh/YubiKey-Guide/$ref#nixosConfigurations.yubikeyLive.x86_64-linux.config.system.build.isoImage\n</code></pre> <p>If you have this repository checked out:</p> <p>Recommended, but optional: update <code>nixpkgs</code> and <code>drduh/config</code>:</p> <pre><code>nix flake update --commit-lock-file\n</code></pre> <p>Build the image:</p> <pre><code>nix build --experimental-features \"nix-command flakes\" .#nixosConfigurations.yubikeyLive.x86_64-linux.config.system.build.isoImage\n</code></pre> <p>Copy it to a USB drive:</p> <pre><code>sudo cp -v result/iso/yubikeyLive.iso /dev/sdc ; sync\n</code></pre> <p>Skip steps to create a temporary working directory and a hardened configuration, as they are already part of the image.</p> <p>If you want to test your build before copying it into a USB stick, you can try it out on your machine using a tool like QEMU. Please keep in mind that a virtualized environment does not provide the same amount of security as an ephemeral system (see Prepare environment above). Here is an example QEMU invocation after placing <code>yubikeyLive</code> in <code>result/iso</code> using the above <code>nix build</code> command:</p> <pre><code># Launch with 4G memory, 2 CPUs and KVM enabled\nqemu-system-x86_64 \\\n    -enable-kvm \\\n    -m 4G \\\n    -smp 2 \\\n    -drive readonly=on,media=cdrom,format=raw,file=result/iso/yubikeyLive.iso\n</code></pre> <p>Arch</p> <pre><code>sudo pacman -Syu gnupg pcsclite ccid yubikey-personalization\n</code></pre> <p>RHEL7</p> <pre><code>sudo yum install -y gnupg2 pinentry-curses pcsc-lite pcsc-lite-libs gnupg2-smime\n</code></pre> <p>Fedora</p> <pre><code>sudo dnf install wget\n\nwget https://github.com/rpmsphere/noarch/raw/master/r/rpmsphere-release-38-1.noarch.rpm\n\nsudo rpm -Uvh rpmsphere-release*rpm\n\nsudo dnf install \\\n  gnupg2 dirmngr cryptsetup gnupg2-smime \\\n  pcsc-tools opensc pcsc-lite secure-delete \\\n  pgp-tools yubikey-personalization-gui\n</code></pre>"},{"location":"windows/yubikey/drduh.html#prepare-gnupg","title":"Prepare GnuPG","text":"<p>Create a temporary directory which will be cleared on reboot and set it as the GnuPG directory:</p> <pre><code>export GNUPGHOME=$(mktemp -d -t gnupg-$(date +%Y-%m-%d)-XXXXXXXXXX)\n</code></pre>"},{"location":"windows/yubikey/drduh.html#configuration","title":"Configuration","text":"<p>Import or create a hardened configuration:</p> <pre><code>cd $GNUPGHOME\n\nwget https://raw.githubusercontent.com/drduh/config/master/gpg.conf\n</code></pre> <p>The options will look similar to:</p> <pre><code>$ grep -ve \"^#\" $GNUPGHOME/gpg.conf\npersonal-cipher-preferences AES256 AES192 AES\npersonal-digest-preferences SHA512 SHA384 SHA256\npersonal-compress-preferences ZLIB BZIP2 ZIP Uncompressed\ndefault-preference-list SHA512 SHA384 SHA256 AES256 AES192 AES ZLIB BZIP2 ZIP Uncompressed\ncert-digest-algo SHA512\ns2k-digest-algo SHA512\ns2k-cipher-algo AES256\ncharset utf-8\nno-comments\nno-emit-version\nno-greeting\nkeyid-format 0xlong\nlist-options show-uid-validity\nverify-options show-uid-validity\nwith-fingerprint\nrequire-cross-certification\nno-symkey-cache\narmor\nuse-agent\nthrow-keyids\n</code></pre> <p>Note</p> <p>Networking can be disabled for the remainder of the setup.</p>"},{"location":"windows/yubikey/drduh.html#identity","title":"Identity","text":"<p>When creating an identity with GnuPG, the default options ask for a \"Real name\", \"Email address\" and optional \"Comment\".</p> <p>Depending on how you plan to use GnuPG, set these values respectively:</p> <pre><code>export IDENTITY=\"YubiKey User &lt;yubikey@example&gt;\"\n</code></pre> <p>Or use any attribute which will uniquely identity the key (this may be incompatible with certain use cases):</p> <pre><code>export IDENTITY=\"My Cool YubiKey - 2024\"\n</code></pre>"},{"location":"windows/yubikey/drduh.html#key","title":"Key","text":"<p>Select the desired algorithm and key size. This guide recommends 4096-bit RSA.</p> <p>Set the value:</p> <pre><code>export KEY_TYPE=rsa4096\n</code></pre>"},{"location":"windows/yubikey/drduh.html#expiration","title":"Expiration","text":"<p>Determine the desired Subkey validity duration.</p> <p>Setting a Subkey expiry forces identity and credential lifecycle management. However, setting an expiry on the Certify key is pointless, because it can just be used to extend itself. Revocation certificates should instead be used to revoke an identity.</p> <p>This guide recommends a two year expiration for Subkeys to balance security and usability, however longer durations are possible to reduce maintenance frequency.</p> <p>When Subkeys expire, they may still be used to decrypt with GnuPG and authenticate with SSH, however they can not be used to encrypt nor sign new messages.</p> <p>Subkeys must be renewed or rotated using the Certify key - see Updating keys.</p> <p>Set the expiration date to two years:</p> <pre><code>export EXPIRATION=2y\n</code></pre> <p>Or set the expiration date to a specific date to schedule maintenance:</p> <pre><code>export EXPIRATION=2026-05-01\n</code></pre>"},{"location":"windows/yubikey/drduh.html#passphrase","title":"Passphrase","text":"<p>Generate a passphrase for the Certify key. It will be used infrequently to manage Subkeys and should be very strong. The passphrase is recommended to consist of only uppercase letters and numbers for improved readability. Diceware is another method for creating memorable passphrases.</p> <p>The following commands will generate a strong passphrase and avoid ambiguous characters:</p> <pre><code>export CERTIFY_PASS=$(LC_ALL=C tr -dc 'A-Z1-9' &lt; /dev/urandom | \\\n  tr -d \"1IOS5U\" | fold -w 30 | sed \"-es/./ /\"{1..26..5} | \\\n  cut -c2- | tr \" \" \"-\" | head -1) ; printf \"\\n$CERTIFY_PASS\\n\\n\"\n</code></pre> <p>Write the passphrase in a secure location, ideally separate from the portable storage device used for key material, or memorize it.</p> <p>This repository includes a <code>passphrase.html</code> template to help with credential transcription. Save the raw file, open it with a browser and print. Use a pen or permanent marker to select a letter or number on each row for each character in the passphrase. <code>passphrase.csv</code> can also be printed without a browser:</p> <pre><code>lp -d Printer-Name passphrase.csv\n</code></pre>"},{"location":"windows/yubikey/drduh.html#create-certify-key","title":"Create Certify key","text":"<p>The primary key to generate is the Certify key, which is responsible for issuing Subkeys for encryption, signature and authentication operations.</p> <p>The Certify key should be kept offline at all times and only accessed from a dedicated and secure environment to issue or revoke Subkeys.</p> <p>Do not set an expiration date on the Certify key.</p> <p>Generate the Certify key:</p> <pre><code>echo \"$CERTIFY_PASS\" | gpg --batch --passphrase-fd 0 \\\n    --quick-generate-key \"$IDENTITY\" \"$KEY_TYPE\" cert never\n</code></pre> <p>Set and view the Certify key identifier and fingerprint for use later:</p> <pre><code>export KEYID=$(gpg -k --with-colons \"$IDENTITY\" | awk -F: '/^pub:/ { print $5; exit }')\n\nexport KEYFP=$(gpg -k --with-colons \"$IDENTITY\" | awk -F: '/^fpr:/ { print $10; exit }')\n\nprintf \"\\nKey ID: %40s\\nKey FP: %40s\\n\\n\" \"$KEYID\" \"$KEYFP\"\n</code></pre>"},{"location":"windows/yubikey/drduh.html#add-additional-uids-optional","title":"Add additional uids (optional)","text":""},{"location":"windows/yubikey/drduh.html#rationale","title":"Rationale","text":"<p>This is an optional step if you have a use case which requires additional identities. Some non-exhaustive example use cases are:</p> <ul> <li>different email addresses for different languages</li> <li>different email addresses for professional versus personal but please see alternative reason below for not tying these addresses together</li> <li>anonymized email addresses for different git providers</li> </ul> <p>An alternative would be to have distinct keys but you would then require multiple YubiKeys, as each can only hold a single key for each type (signing, encryption, authentication). Nevertheless, there can be good reasons to have multiple YubiKeys:</p> <ul> <li>if you have different email addresses for professional versus personal use cases, having distinct keys allow you to disassociate the identities</li> <li>if you are also using the YubiKey as a U2F or FIDO2 device, having multiple YubiKeys is generally recommended as a backup measure</li> </ul>"},{"location":"windows/yubikey/drduh.html#steps","title":"Steps","text":"<p>Define an array containing additional uids. As this is bash syntax, each array element should be surrounded by quotes and each element should be separated by a space:</p> <pre><code>declare -a additional_uids\nadditional_uids=(\"Super Cool YubiKey 2024\" \"uid 1 &lt;uid1@example.org&gt;\")\n</code></pre> <p>Add the additional uids to the key:</p> <pre><code>for uid in \"${additional_uids[@]}\" ; do \\\n    echo \"$CERTIFY_PASS\" | gpg --batch --passphrase-fd 0 --pinentry-mode=loopback --quick-add-uid \"$KEYFP\" \"$uid\"\ndone\n</code></pre> <p>Adjust the trust of the additional uids to be ultimate:</p> <pre><code>gpg --command-fd=0 --pinentry-mode=loopback --edit-key \"$KEYID\" &lt;&lt;EOF\nuid *\ntrust\n5\ny\nsave\nEOF\n</code></pre>"},{"location":"windows/yubikey/drduh.html#create-subkeys","title":"Create Subkeys","text":"<p>Use the following command to generate Signature, Encryption and Authentication Subkeys using the previously configured key type, passphrase and expiration:</p> <pre><code>for SUBKEY in sign encrypt auth ; do \\\n  echo \"$CERTIFY_PASS\" | gpg --batch --pinentry-mode=loopback --passphrase-fd 0 \\\n      --quick-add-key \"$KEYFP\" \"$KEY_TYPE\" \"$SUBKEY\" \"$EXPIRATION\"\ndone\n</code></pre>"},{"location":"windows/yubikey/drduh.html#verify-keys","title":"Verify keys","text":"<p>List available secret keys:</p> <pre><code>gpg -K\n</code></pre> <p>The output will display [C]ertify, [S]ignature, [E]ncryption and [A]uthentication keys:</p> <pre><code>sec   rsa4096/0xF0F2CFEB04341FB5 2024-01-01 [C]\n      Key fingerprint = 4E2C 1FA3 372C BA96 A06A  C34A F0F2 CFEB 0434 1FB5\nuid                   [ultimate] YubiKey User &lt;yubikey@example&gt;\nssb   rsa4096/0xB3CD10E502E19637 2024-01-01 [S] [expires: 2026-05-01]\nssb   rsa4096/0x30CBE8C4B085B9F7 2024-01-01 [E] [expires: 2026-05-01]\nssb   rsa4096/0xAD9E24E1B8CB9600 2024-01-01 [A] [expires: 2026-05-01]\n</code></pre>"},{"location":"windows/yubikey/drduh.html#backup-keys","title":"Backup keys","text":"<p>Save a copy of the Certify key, Subkeys and public key:</p> <pre><code>echo \"$CERTIFY_PASS\" | gpg --output $GNUPGHOME/$KEYID-Certify.key \\\n    --batch --pinentry-mode=loopback --passphrase-fd 0 \\\n    --armor --export-secret-keys $KEYID\n\necho \"$CERTIFY_PASS\" | gpg --output $GNUPGHOME/$KEYID-Subkeys.key \\\n    --batch --pinentry-mode=loopback --passphrase-fd 0 \\\n    --armor --export-secret-subkeys $KEYID\n\ngpg --output $GNUPGHOME/$KEYID-$(date +%F).asc \\\n    --armor --export $KEYID\n</code></pre> <p>Create an encrypted backup on portable storage to be kept offline in a secure and durable location.</p> <p>The following process is recommended to be repeated several times on multiple portable storage devices, as they are likely to fail over time. As an additional backup measure, Paperkey can be used to make a physical copy of key materials for improved durability.</p> <p>Tip</p> <p>The ext2 filesystem without encryption can be mounted on Linux and OpenBSD. Use FAT32 or NTFS filesystem for macOS and Windows compatibility instead.</p> <p>Linux</p> <p>Attach a portable storage device and check its label, in this case <code>/dev/sdc</code>:</p> <pre><code>$ sudo dmesg | tail\nusb-storage 3-2:1.0: USB Mass Storage device detected\nsd 2:0:0:0: [sdc] Attached SCSI removable disk\n\n$ sudo fdisk -l /dev/sdc\nDisk /dev/sdc: 14.9 GiB, 15931539456 bytes, 31116288 sectors\n</code></pre> <p>Warning</p> <p>Confirm the destination (<code>of</code>) before issuing the following command - it is destructive! This guide uses <code>/dev/sdc</code> throughout, but this value may be different on your system.</p> <p>Zero the header to prepare for encryption:</p> <pre><code>sudo dd if=/dev/zero of=/dev/sdc bs=4M count=1\n</code></pre> <p>Remove and re-connect the storage device.</p> <p>Erase and create a new partition table:</p> <pre><code>sudo fdisk /dev/sdc &lt;&lt;EOF\ng\nw\nEOF\n</code></pre> <p>Create a small (at least 20 Mb is recommended to account for the LUKS header size) partition for storing secret materials:</p> <pre><code>sudo fdisk /dev/sdc &lt;&lt;EOF\nn\n\n\n+20M\nw\nEOF\n</code></pre> <p>Use LUKS to encrypt the new partition.</p> <p>Generate another unique Passphrase (ideally different from the one used for the Certify key) to protect the encrypted volume:</p> <pre><code>export LUKS_PASS=$(LC_ALL=C tr -dc 'A-Z1-9' &lt; /dev/urandom | \\\n  tr -d \"1IOS5U\" | fold -w 30 | sed \"-es/./ /\"{1..26..5} | \\\n  cut -c2- | tr \" \" \"-\" | head -1) ; printf \"\\n$LUKS_PASS\\n\\n\"\n</code></pre> <p>This passphrase will also be used infrequently to access the Certify key and should be very strong.</p> <p>Write the passphrase down or memorize it.</p> <p>Format the partition:</p> <pre><code>echo $LUKS_PASS | sudo cryptsetup -q luksFormat /dev/sdc1\n</code></pre> <p>Mount the partition:</p> <pre><code>echo $LUKS_PASS | sudo cryptsetup -q luksOpen /dev/sdc1 gnupg-secrets\n</code></pre> <p>Create an ext2 filesystem:</p> <pre><code>sudo mkfs.ext2 /dev/mapper/gnupg-secrets -L gnupg-$(date +%F)\n</code></pre> <p>Mount the filesystem and copy the temporary GnuPG working directory with key materials:</p> <pre><code>sudo mkdir /mnt/encrypted-storage\n\nsudo mount /dev/mapper/gnupg-secrets /mnt/encrypted-storage\n\nsudo cp -av $GNUPGHOME /mnt/encrypted-storage/\n</code></pre> <p>Unmount and close the encrypted volume:</p> <pre><code>sudo umount /mnt/encrypted-storage\n\nsudo cryptsetup luksClose gnupg-secrets\n</code></pre> <p>Repeat the process for any additional storage devices (at least two are recommended).</p> <p>OpenBSD</p> <p>Attach a USB disk and determine its label:</p> <pre><code>$ dmesg | grep sd.\\ at\nsd2 at scsibus5 targ 1 lun 0: &lt;TS-RDF5, SD Transcend, TS37&gt; SCSI4 0/direct removable serial.00000000000000000000\n</code></pre> <p>Print the existing partitions to make sure it's the right device:</p> <pre><code>doas disklabel -h sd2\n</code></pre> <p>Initialize the disk by creating an <code>a</code> partition with FS type <code>RAID</code> and size of 25 Megabytes:</p> <pre><code>$ doas fdisk -giy sd2\nWriting MBR at offset 0.\nWriting GPT.\n\n$ doas disklabel -E sd2\nLabel editor (enter '?' for help at any prompt)\nsd2&gt; a a\noffset: [64]\nsize: [31101776] 25M\nFS type: [4.2BSD] RAID\nsd2*&gt; w\nsd2&gt; q\nNo label changes\n</code></pre> <p>Encrypt with bioctl using a unique Passphrase:</p> <pre><code>$ doas bioctl -c C -l sd2a softraid0\nNew passphrase:\nRe-type passphrase:\nsoftraid0: CRYPTO volume attached as sd3\n</code></pre> <p>Create an <code>i</code> partition on the new crypto volume and the filesystem:</p> <pre><code>$ doas fdisk -giy sd3\nWriting MBR at offset 0.\nWriting GPT.\n\n$ doas disklabel -E sd3\nLabel editor (enter '?' for help at any prompt)\nsd3&gt; a i\noffset: [64]\nsize: [16001]\nFS type: [4.2BSD]\nsd3*&gt; w\nsd3&gt; q\nNo label changes.\n\n$ doas newfs sd3i\n</code></pre> <p>Mount the filesystem and copy the temporary directory with the keyring:</p> <pre><code>doas mkdir /mnt/encrypted-storage\n\ndoas mount /dev/sd3i /mnt/encrypted-storage\n\ndoas cp -av $GNUPGHOME /mnt/encrypted-storage\n</code></pre> <p>Unmount and remove the encrypted volume:</p> <pre><code>doas umount /mnt/encrypted-storage\n\ndoas bioctl -d sd3\n</code></pre> <p>See OpenBSD FAQ#14 for more information.</p>"},{"location":"windows/yubikey/drduh.html#export-public-key","title":"Export public key","text":"<p>Important</p> <p>Without the public key, it will not be possible to use GnuPG to decrypt nor sign messages. However, YubiKey can still be used for SSH authentication.</p> <p>Connect another portable storage device or create a new partition on the existing one.</p> <p>Linux</p> <p>Using the same <code>/dev/sdc</code> device as in the previous step, create a small (at least 20 Mb is recommended) partition for storing materials:</p> <pre><code>sudo fdisk /dev/sdc &lt;&lt;EOF\nn\n\n\n+20M\nw\nEOF\n</code></pre> <p>Create a filesystem and export the public key:</p> <pre><code>sudo mkfs.ext2 /dev/sdc2\n\nsudo mkdir /mnt/public\n\nsudo mount /dev/sdc2 /mnt/public\n\ngpg --armor --export $KEYID | sudo tee /mnt/public/$KEYID-$(date +%F).asc\n\nsudo chmod 0444 /mnt/public/*.asc\n</code></pre> <p>Unmount and remove the storage device:</p> <pre><code>sudo umount /mnt/public\n</code></pre> <p>OpenBSD</p> <pre><code>$ doas disklabel -E sd2\nLabel editor (enter '?' for help at any prompt)\nsd2&gt; a b\noffset: [32130]\nsize: [31069710] 25M\nFS type: [swap] 4.2BSD\nsd2*&gt; w\nsd2&gt; q\nNo label changes.\n</code></pre> <p>Create a filesystem and export the public key to it:</p> <pre><code>doas newfs sd2b\n\ndoas mkdir /mnt/public\n\ndoas mount /dev/sd2b /mnt/public\n\ngpg --armor --export $KEYID | doas tee /mnt/public/$KEYID-$(date +%F).asc\n</code></pre> <p>Unmount and remove the storage device:</p> <pre><code>doas umount /mnt/public\n</code></pre>"},{"location":"windows/yubikey/drduh.html#configure-yubikey","title":"Configure YubiKey","text":"<p>Connect YubiKey and confirm its status:</p> <pre><code>gpg --card-status\n</code></pre> <p>If the card is locked, Reset it.</p>"},{"location":"windows/yubikey/drduh.html#change-pin","title":"Change PIN","text":"<p>YubiKey's PGP interface has its own PINs separate from other modules such as PIV:</p> Name Default value Capability User PIN <code>123456</code> cryptographic operations (decrypt, sign, authenticate) Admin PIN <code>12345678</code> reset PIN, change Reset Code, add keys and owner information Reset Code None reset PIN (more information) <p>Determine the desired PIN values. They can be shorter than the Certify key passphrase due to limited brute-forcing opportunities; the User PIN should be convenient enough to remember for every-day use.</p> <p>The User PIN must be at least 6 characters and the Admin PIN must be at least 8 characters. A maximum of 127 ASCII characters are allowed. See GnuPG - Managing PINs for more information.</p> <p>Set PINs manually or generate them, for example a 6 digit User PIN and 8 digit Admin PIN:</p> <pre><code>export ADMIN_PIN=$(LC_ALL=C tr -dc '0-9' &lt; /dev/urandom | fold -w8 | head -1)\n\nexport USER_PIN=$(LC_ALL=C tr -dc '0-9' &lt; /dev/urandom | fold -w6 | head -1)\n\nprintf \"\\nAdmin PIN: %12s\\nUser PIN: %13s\\n\\n\" \"$ADMIN_PIN\" \"$USER_PIN\"\n</code></pre> <p>Change the Admin PIN:</p> <pre><code>gpg --command-fd=0 --pinentry-mode=loopback --change-pin &lt;&lt;EOF\n3\n12345678\n$ADMIN_PIN\n$ADMIN_PIN\nq\nEOF\n</code></pre> <p>Change the User PIN:</p> <pre><code>gpg --command-fd=0 --pinentry-mode=loopback --change-pin &lt;&lt;EOF\n1\n123456\n$USER_PIN\n$USER_PIN\nq\nEOF\n</code></pre> <p>Remove and re-insert YubiKey.</p> <p>Warning</p> <p>Three incorrect User PIN entries will cause it to become blocked and must be unblocked with either the Admin PIN or Reset Code. </p> <p>Danger</p> <p>Three incorrect Admin PIN or Reset Code entries will destroy data on YubiKey.</p> <p>The number of retry attempts can be changed, for example to 5 attempts:</p> <pre><code>ykman openpgp access set-retries 5 5 5 -f -a $ADMIN_PIN\n</code></pre>"},{"location":"windows/yubikey/drduh.html#set-attributes","title":"Set attributes","text":"<p>Set the smart card attributes with <code>gpg --edit-card</code> and <code>admin</code> mode - use <code>help</code> to see available options.</p> <p>Or use predetermined values:</p> <pre><code>gpg --command-fd=0 --pinentry-mode=loopback --edit-card &lt;&lt;EOF\nadmin\nlogin\n$IDENTITY\n$ADMIN_PIN\nquit\nEOF\n</code></pre> <p>Run <code>gpg --card-status</code> to verify results (Login data field).</p>"},{"location":"windows/yubikey/drduh.html#transfer-subkeys","title":"Transfer Subkeys","text":"<p>Important</p> <p>Transferring keys to YubiKey is a one-way operation which converts the on-disk key into a stub making it no longer usable to transfer to subsequent YubiKeys. Ensure a backup was made before proceeding.</p> <p>The Certify key passphrase and Admin PIN are required to transfer keys.</p>"},{"location":"windows/yubikey/drduh.html#signature-key","title":"Signature key","text":"<p>Transfer the first key:</p> <pre><code>gpg --command-fd=0 --pinentry-mode=loopback --edit-key $KEYID &lt;&lt;EOF\nkey 1\nkeytocard\n1\n$CERTIFY_PASS\n$ADMIN_PIN\nsave\nEOF\n</code></pre>"},{"location":"windows/yubikey/drduh.html#encryption-key","title":"Encryption key","text":"<p>Repeat the process for the second key:</p> <pre><code>gpg --command-fd=0 --pinentry-mode=loopback --edit-key $KEYID &lt;&lt;EOF\nkey 2\nkeytocard\n2\n$CERTIFY_PASS\n$ADMIN_PIN\nsave\nEOF\n</code></pre>"},{"location":"windows/yubikey/drduh.html#authentication-key","title":"Authentication key","text":"<p>Repeat the process for the third key:</p> <pre><code>gpg --command-fd=0 --pinentry-mode=loopback --edit-key $KEYID &lt;&lt;EOF\nkey 3\nkeytocard\n3\n$CERTIFY_PASS\n$ADMIN_PIN\nsave\nEOF\n</code></pre>"},{"location":"windows/yubikey/drduh.html#verify-transfer","title":"Verify transfer","text":"<p>Verify Subkeys have been moved to YubiKey with <code>gpg -K</code> and look for <code>ssb&gt;</code>, for example:</p> <pre><code>sec   rsa4096/0xF0F2CFEB04341FB5 2024-01-01 [C]\n      Key fingerprint = 4E2C 1FA3 372C BA96 A06A  C34A F0F2 CFEB 0434 1FB5\nuid                   [ultimate] YubiKey User &lt;yubikey@example&gt;\nssb&gt;  rsa4096/0xB3CD10E502E19637 2024-01-01 [S] [expires: 2026-05-01]\nssb&gt;  rsa4096/0x30CBE8C4B085B9F7 2024-01-01 [E] [expires: 2026-05-01]\nssb&gt;  rsa4096/0xAD9E24E1B8CB9600 2024-01-01 [A] [expires: 2026-05-01]\n</code></pre> <p>The <code>&gt;</code> after a tag indicates the key is stored on a smart card.</p>"},{"location":"windows/yubikey/drduh.html#finish-setup","title":"Finish setup","text":"<p>Verify you have done the following:</p> <ul> <li> Memorized or wrote down the Certify key (identity) passphrase to a secure and durable location</li> <li><code>echo $CERTIFY_PASS</code> to see it again; <code>passphrase.html</code> or <code>passphrase.csv</code> to transcribe it</li> <li> Memorized or wrote down passphrase to encrypted volume on portable storage</li> <li><code>echo $LUKS_PASS</code> to see it again; <code>passphrase.html</code> or <code>passphrase.csv</code> to transcribe it</li> <li> Saved the Certify key and Subkeys to encrypted portable storage, to be kept offline</li> <li>At least two backups are recommended, stored at separate locations</li> <li> Exported a copy of the public key where is can be easily accessed later</li> <li>Separate device or non-encrypted partition was used</li> <li> Memorized or wrote down the User PIN and Admin PIN, which are unique and changed from default values</li> <li><code>echo $USER_PIN $ADMIN_PIN</code> to see them again; <code>passphrase.html</code> or <code>passphrase.csv</code> to transcribe them</li> <li> Moved Encryption, Signature and Authentication Subkeys to YubiKey</li> <li><code>gpg -K</code> shows <code>ssb&gt;</code> for each of the 3 Subkeys</li> </ul> <p>Reboot to clear the ephemeral environment and complete setup.</p>"},{"location":"windows/yubikey/drduh.html#using-yubikey","title":"Using YubiKey","text":"<p>Initialize GnuPG:</p> <pre><code>gpg -k\n</code></pre> <p>Import or create a hardened configuration:</p> <pre><code>cd ~/.gnupg\n\nwget https://raw.githubusercontent.com/drduh/config/master/gpg.conf\n</code></pre> <p>Set the following option. This avoids the problem where GnuPG will repeatedly prompt for the insertion of an already-inserted YubiKey:</p> <pre><code>touch scdaemon.conf\n\necho \"disable-ccid\" &gt;&gt;scdaemon.conf\n</code></pre> <p>Install the required packages:</p> <p>Debian/Ubuntu</p> <pre><code>sudo apt update\n\nsudo apt install -y gnupg gnupg-agent scdaemon pcscd\n</code></pre> <p>OpenBSD</p> <pre><code>doas pkg_add gnupg pcsc-tools\n\ndoas rcctl enable pcscd\n\ndoas reboot\n</code></pre> <p>Mount the non-encrypted volume with the public key:</p> <p>Debian/Ubuntu</p> <pre><code>sudo mkdir /mnt/public\n\nsudo mount /dev/sdc2 /mnt/public\n</code></pre> <p>OpenBSD</p> <pre><code>doas mkdir /mnt/public\n\ndoas mount /dev/sd3i /mnt/public\n</code></pre> <p>Import the public key:</p> <pre><code>gpg --import /mnt/public/*.asc\n</code></pre> <p>Or download the public key from a keyserver:</p> <pre><code>gpg --recv $KEYID\n</code></pre> <p>Or with the URL on YubiKey, retrieve the public key:</p> <pre><code>gpg/card&gt; fetch\n\ngpg/card&gt; quit\n</code></pre> <p>Determine the key ID:</p> <pre><code>gpg -k\n\nexport KEYID=0xF0F2CFEB04341FB5\n</code></pre> <p>Assign ultimate trust by typing <code>trust</code> and selecting option <code>5</code> then <code>quit</code>:</p> <pre><code>gpg --command-fd=0 --pinentry-mode=loopback --edit-key $KEYID &lt;&lt;EOF\ntrust\n5\ny\nsave\nEOF\n</code></pre> <p>Remove and re-insert YubiKey.</p> <p>Verify the status with <code>gpg --card-status</code> which will list the available Subkeys:</p> <pre><code>Reader ...........: Yubico YubiKey OTP FIDO CCID 00 00\nApplication ID ...: D2760001240102010006055532110000\nApplication type .: OpenPGP\nVersion ..........: 3.4\nManufacturer .....: Yubico\nSerial number ....: 05553211\nName of cardholder: YubiKey User\nLanguage prefs ...: en\nSalutation .......:\nURL of public key : [not set]\nLogin data .......: yubikey@example\nSignature PIN ....: not forced\nKey attributes ...: rsa4096 rsa4096 rsa4096\nMax. PIN lengths .: 127 127 127\nPIN retry counter : 3 3 3\nSignature counter : 0\nKDF setting ......: on\nSignature key ....: CF5A 305B 808B 7A0F 230D  A064 B3CD 10E5 02E1 9637\n      created ....: 2024-01-01 12:00:00\nEncryption key....: A5FA A005 5BED 4DC9 889D  38BC 30CB E8C4 B085 B9F7\n      created ....: 2024-01-01 12:00:00\nAuthentication key: 570E 1355 6D01 4C04 8B6D  E2A3 AD9E 24E1 B8CB 9600\n      created ....: 2024-01-01 12:00:00\nGeneral key info..: sub  rsa4096/0xB3CD10E502E19637 2024-01-01 YubiKey User &lt;yubikey@example&gt;\nsec#  rsa4096/0xF0F2CFEB04341FB5  created: 2024-01-01  expires: never\nssb&gt;  rsa4096/0xB3CD10E502E19637  created: 2024-01-01  expires: 2026-05-01\n                                  card-no: 0006 05553211\nssb&gt;  rsa4096/0x30CBE8C4B085B9F7  created: 2024-01-01  expires: 2026-05-01\n                                  card-no: 0006 05553211\nssb&gt;  rsa4096/0xAD9E24E1B8CB9600  created: 2024-01-01  expires: 2026-05-01\n                                  card-no: 0006 05553211\n</code></pre> <p><code>sec#</code> indicates the corresponding key is not available (the Certify key is offline).</p> <p>YubiKey is now ready for use!</p>"},{"location":"windows/yubikey/drduh.html#encryption","title":"Encryption","text":"<p>Encrypt a message to yourself (useful for storing credentials or protecting backups):</p> <pre><code>echo \"\\ntest message string\" | \\\n  gpg --encrypt --armor \\\n      --recipient $KEYID --output encrypted.txt\n</code></pre> <p>Decrypt the message - a prompt for the User PIN will appear:</p> <pre><code>gpg --decrypt --armor encrypted.txt\n</code></pre> <p>To encrypt to multiple recipients/keys, set the preferred key ID last:</p> <pre><code>echo \"test message string\" | \\\n  gpg --encrypt --armor \\\n      --recipient $KEYID_2 --recipient $KEYID_1 --recipient $KEYID \\\n      --output encrypted.txt\n</code></pre> <p>Use a shell function to make encrypting files easier:</p> <pre><code>secret () {\n  output=\"${1}\".$(date +%s).enc\n  gpg --encrypt --armor --output ${output} \\\n    -r $KEYID \"${1}\" &amp;&amp; echo \"${1} -&gt; ${output}\"\n}\n\nreveal () {\n  output=$(echo \"${1}\" | rev | cut -c16- | rev)\n  gpg --decrypt --output ${output} \"${1}\" &amp;&amp; \\\n    echo \"${1} -&gt; ${output}\"\n}\n</code></pre> <p>Example output:</p> <pre><code>$ secret document.pdf\ndocument.pdf -&gt; document.pdf.1580000000.enc\n\n$ reveal document.pdf.1580000000.enc\ngpg: anonymous recipient; trying secret key 0xF0F2CFEB04341FB5 ...\ngpg: okay, we are the anonymous recipient.\ngpg: encrypted with RSA key, ID 0x0000000000000000\ndocument.pdf.1580000000.enc -&gt; document.pdf\n</code></pre> <p>drduh/Purse is a password manager based on GnuPG and YubiKey to securely store and use credentials.</p>"},{"location":"windows/yubikey/drduh.html#signature","title":"Signature","text":"<p>Sign a message:</p> <pre><code>echo \"test message string\" | gpg --armor --clearsign &gt; signed.txt\n</code></pre> <p>Verify the signature:</p> <pre><code>gpg --verify signed.txt\n</code></pre> <p>The output will be similar to:</p> <pre><code>gpg: Signature made Mon 01 Jan 2024 12:00:00 PM UTC\ngpg:                using RSA key CF5A305B808B7A0F230DA064B3CD10E502E19637\ngpg: Good signature from \"YubiKey User &lt;yubikey@example&gt;\" [ultimate]\nPrimary key fingerprint: 4E2C 1FA3 372C BA96 A06A  C34A F0F2 CFEB 0434 1FB5\n     Subkey fingerprint: CF5A 305B 808B 7A0F 230D  A064 B3CD 10E5 02E1 9637\n</code></pre>"},{"location":"windows/yubikey/drduh.html#configure-touch","title":"Configure touch","text":"<p>By default, YubiKey will perform cryptographic operations without requiring any action from the user after the key is unlocked once with the PIN.</p> <p>To require a touch for each key operation, use YubiKey Manager and the Admin PIN to set key policy.</p> <p>Encryption:</p> <pre><code>ykman openpgp keys set-touch dec on\n</code></pre> <p>Note</p> <p>Versions of YubiKey Manager before 5.1.0 use <code>enc</code> instead of <code>dec</code> for encryption:</p> <pre><code>ykman openpgp keys set-touch enc on\n</code></pre> <p>Even older versions of YubiKey Manager use <code>touch</code> instead of <code>set-touch</code></p> <p>Signature:</p> <pre><code>ykman openpgp keys set-touch sig on\n</code></pre> <p>Authentication:</p> <pre><code>ykman openpgp keys set-touch aut on\n</code></pre> <p>To view and adjust policy options:</p> <pre><code>ykman openpgp keys set-touch -h\n</code></pre> <p><code>Cached</code> or <code>Cached-Fixed</code> may be desirable for YubiKey use with email clients.</p> <p>YubiKey will blink when it is waiting for a touch. On Linux, maximbaz/yubikey-touch-detector can be used to indicate YubiKey is waiting for a touch.</p>"},{"location":"windows/yubikey/drduh.html#ssh","title":"SSH","text":"<p>Import or create a hardened configuration:</p> <pre><code>cd ~/.gnupg\n\nwget https://raw.githubusercontent.com/drduh/config/master/gpg-agent.conf\n</code></pre> <p>Important</p> <p>The <code>cache-ttl</code> options do not apply when using YubiKey as a smart card, because the PIN is cached by the smart card itself. To clear the PIN from cache (equivalent to <code>default-cache-ttl</code> and <code>max-cache-ttl</code>), remove YubiKey, or set <code>forcesig</code> when editing the card to be prompted for the PIN each time.</p> <p>Tip</p> <p>Set <code>pinentry-program</code> to <code>/usr/bin/pinentry-gnome3</code> for a GUI-based prompt.</p> <p>macOS</p> <p>Install pinentry with <code>brew install pinentry-mac</code> then edit <code>gpg-agent.conf</code> to set the <code>pinentry-program</code> path to:</p> <ul> <li>Apple Silicon Macs: <code>/opt/homebrew/bin/pinentry-mac</code></li> <li>Intel Macs: <code>/usr/local/bin/pinentry-mac</code></li> <li>MacGPG Suite: <code>/usr/local/MacGPG2/libexec/pinentry-mac.app/Contents/MacOS/pinentry-mac</code></li> </ul> <p>Then run <code>gpgconf --kill gpg-agent</code> for the change to take effect.</p> <p>To use graphical applications on macOS, additional setup is required.</p> <p>Create <code>$HOME/Library/LaunchAgents/gnupg.gpg-agent.plist</code> with the following contents:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\"\n  \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n    &lt;dict&gt;\n        &lt;key&gt;Label&lt;/key&gt;\n        &lt;string&gt;gnupg.gpg-agent&lt;/string&gt;\n        &lt;key&gt;RunAtLoad&lt;/key&gt;\n        &lt;true/&gt;\n        &lt;key&gt;KeepAlive&lt;/key&gt;\n        &lt;false/&gt;\n        &lt;key&gt;ProgramArguments&lt;/key&gt;\n        &lt;array&gt;\n            &lt;string&gt;/usr/local/MacGPG2/bin/gpg-connect-agent&lt;/string&gt;\n            &lt;string&gt;/bye&lt;/string&gt;\n        &lt;/array&gt;\n    &lt;/dict&gt;\n&lt;/plist&gt;\n</code></pre> <p>Load it:</p> <pre><code>launchctl load $HOME/Library/LaunchAgents/gnupg.gpg-agent.plist\n</code></pre> <p>Create <code>$HOME/Library/LaunchAgents/gnupg.gpg-agent-symlink.plist</code> with the following contens:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/ProperyList-1.0/dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n    &lt;dict&gt;\n        &lt;key&gt;Label&lt;/key&gt;\n        &lt;string&gt;gnupg.gpg-agent-symlink&lt;/string&gt;\n        &lt;key&gt;ProgramArguments&lt;/key&gt;\n        &lt;array&gt;\n            &lt;string&gt;/bin/sh&lt;/string&gt;\n            &lt;string&gt;-c&lt;/string&gt;\n            &lt;string&gt;/bin/ln -sf $HOME/.gnupg/S.gpg-agent.ssh $SSH_AUTH_SOCK&lt;/string&gt;\n        &lt;/array&gt;\n        &lt;key&gt;RunAtLoad&lt;/key&gt;\n        &lt;true/&gt;\n    &lt;/dict&gt;\n&lt;/plist&gt;\n</code></pre> <p>Load it:</p> <pre><code>launchctl load $HOME/Library/LaunchAgents/gnupg.gpg-agent-symlink.plist\n</code></pre> <p>Reboot to activate changes.</p> <p>Windows</p> <p>Windows can already have some virtual smart card readers installed, like the one provided for Windows Hello. To verify YubiKey is the correct one used by scdaemon, add it to its configuration.</p> <p>Find the YubiKey label using PowerShell:</p> <pre><code>PS C:\\WINDOWS\\system32&gt; Get-PnpDevice -Class SoftwareDevice | Where-Object {$_.FriendlyName -like \"*YubiKey*\"} | Select-Object -ExpandProperty FriendlyName\nYubico YubiKey OTP+FIDO+CCID 0\n</code></pre> <p>See How to setup Signed Git Commits with a YubiKey NEO and GPG and Keybase on Windows (2018) for more information.</p> <p>Edit <code>%APPDATA%/gnupg/scdaemon.conf</code> to add:</p> <pre><code>reader-port &lt;device name, e.g. Yubico YubiKey OTP+FIDO+CCID 0&gt;\n</code></pre> <p>Edit <code>%APPDATA%/gnupg/gpg-agent.conf</code> to add:</p> <pre><code>enable-ssh-support\nenable-putty-support\n</code></pre> <p>Restart the agent:</p> <pre><code>gpg-connect-agent killagent /bye\n\ngpg-connect-agent /bye\n</code></pre> <p>Verify YubiKey details:</p> <pre><code>gpg --card-status\n</code></pre> <p>Import the public key and set ultimate trust:</p> <pre><code>gpg --import &lt;path to public key file&gt;\n</code></pre> <p>Retrieve the public key id:</p> <pre><code>gpg --list-public-keys\n</code></pre> <p>Export the SSH public key:</p> <pre><code>gpg --export-ssh-key &lt;public key id&gt;\n</code></pre> <p>Copy the public SSH key to a file - it corresponds to the secret key on YubiKey and can be copied to SSH destination hosts.</p> <p>Create a shortcut that points to <code>gpg-connect-agent /bye</code> and place it in the startup folder <code>shell:startup</code> to make sure the agent starts after reboot. Modify the shortcut properties so it starts in a \"Minimized\" window.</p> <p>PuTTY can now be used for public-key SSH authentication. When the server asks for public-key verification, PuTTY will forward the request to GnuPG, which will prompt for a PIN to authorize the operation.</p> <p>WSL</p> <p>The goal is to configure SSH client inside WSL work together with the Windows agent, such as gpg-agent.exe.</p> <p>Note</p> <p>GnuPG forwarding for cryptographic operations is not supported. See vuori/weasel-pageant for more information.</p> <p>One way to forward is just <code>ssh -A</code> (still need to eval weasel to setup local ssh-agent), and only relies on OpenSSH. In this track, <code>ForwardAgent</code> and <code>AllowAgentForwarding</code> in ssh/sshd config may be involved. However, when using ssh socket forwarding, do not enable <code>ForwardAgent</code> in ssh config. See SSH Agent Forwarding for more information. This requires Ubuntu 16.04 or newer for WSL and Kleopatra.</p> <p>Download vuori/weasel-pageant.</p> <p>Add <code>eval $(/mnt/c/&lt;path of extraction&gt;/weasel-pageant -r -a /tmp/S.weasel-pageant)</code> to the shell rc file. Use a named socket here so it can be used in the <code>RemoteForward</code> directive of <code>~/.ssh/config</code>. Source it with <code>source ~/.bashrc</code>.</p> <p>Display the SSH key with <code>$ ssh-add -l</code></p> <p>Edit <code>~/.ssh/config</code> to add the following for each agent forwarding host:</p> <pre><code>RemoteForward &lt;remote SSH socket path&gt; /tmp/S.weasel-pageant\n</code></pre> <p>Note</p> <p>The remote SSH socket path can be found with <code>gpgconf --list-dirs agent-ssh-socket</code></p> <p>Add the following to the shell rc file:</p> <pre><code>export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)\n</code></pre> <p>Add the following to <code>/etc/ssh/sshd_config</code>:</p> <pre><code>StreamLocalBindUnlink yes\n</code></pre> <p>Reload SSH daemon:</p> <pre><code>sudo service sshd reload\n</code></pre> <p>Remove YubiKey and reboot. Log back into Windows, open a WSL console and enter <code>ssh-add -l</code> - no output should appear.</p> <p>Plug in YubiKey, enter the same command to display the ssh key.</p> <p>Connect to the remote host and use <code>ssh-add -l</code> to confirm forwarding works.</p> <p>Agent forwarding may be chained through multiple hosts. Follow the same protocol to configure each host.</p> <p>An alternate method is the usbipd-win library. If you encounter issues with accessing the YubiKey in WSL after configuring usbipd-win, you may need to add custom polkit rules to ensure proper permissions for the pcscd service. Here's an example configuration using a scard group (the group logic is optional):</p> <p>Create a new rule file at /etc/polkit-1/rules.d/99-pcscd.rules:</p> <pre><code>polkit.addRule(function(action, subject) {\n    if (action.id == \"org.debian.pcsc-lite.access_card\" &amp;&amp;\n        subject.isInGroup(\"scard\")) {\n        return polkit.Result.YES;\n    }\n});\n\npolkit.addRule(function(action, subject) {\n    if (action.id == \"org.debian.pcsc-lite.access_pcsc\" &amp;&amp;\n        subject.isInGroup(\"scard\")) {\n        return polkit.Result.YES;\n    }\n});\n</code></pre>"},{"location":"windows/yubikey/drduh.html#replace-agents","title":"Replace agents","text":"<p>To launch <code>gpg-agent</code> for use by SSH, use the <code>gpg-connect-agent /bye</code> or <code>gpgconf --launch gpg-agent</code> commands.</p> <p>Add the following to the shell rc file:</p> <pre><code>export GPG_TTY=\"$(tty)\"\nexport SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)\ngpgconf --launch gpg-agent\ngpg-connect-agent updatestartuptty /bye &gt; /dev/null\n</code></pre> <p>For fish, <code>config.fish</code> should look like this (consider putting them into the <code>is-interactive</code> block):</p> <pre><code>set -x GPG_TTY (tty)\nset -x SSH_AUTH_SOCK (gpgconf --list-dirs agent-ssh-socket)\ngpgconf --launch gpg-agent\n</code></pre> <p>When using <code>ForwardAgent</code> for ssh-agent forwarding, <code>SSH_AUTH_SOCK</code> only needs to be set on the local host, where YubiKey is connected. On the remote host, <code>ssh</code> will set <code>SSH_AUTH_SOCK</code> to something like <code>/tmp/ssh-mXzCzYT2Np/agent.7541</code> upon connection. Do not set <code>SSH_AUTH_SOCK</code> on the remote host - doing so will break SSH Agent Forwarding.</p> <p>For <code>S.gpg-agent.ssh</code> (see SSH Agent Forwarding for more info), <code>SSH_AUTH_SOCK</code> should also be set on the remote. However, <code>GPG_TTY</code> should not be set on the remote, explanation specified in that section.</p>"},{"location":"windows/yubikey/drduh.html#copy-public-key","title":"Copy public key","text":"<p>Note</p> <p>It is not necessary to import the GnuPG public key in order to use SSH only.</p> <p>Copy and paste the output from <code>ssh-add</code> to the server's <code>authorized_keys</code> file:</p> <pre><code>$ ssh-add -L\nssh-rsa AAAAB4NzaC1yc2EAAAADAQABAAACAz[...]zreOKM+HwpkHzcy9DQcVG2Nw== cardno:000605553211\n</code></pre> <p>Optional</p> <p>Save the public key for identity file configuration. By default, SSH attempts to use all the identities available via the agent. It's often a good idea to manage exactly which keys SSH will use to connect to a server, for example to separate different roles or to avoid being fingerprinted by untrusted ssh servers. To do this you'll need to use the command line argument <code>-i [identity_file]</code> or the <code>IdentityFile</code> and <code>IdentitiesOnly</code> options in <code>.ssh/config</code>.</p> <p>The argument provided to <code>IdentityFile</code> is traditionally the path to the private key file (for example <code>IdentityFile ~/.ssh/id_rsa</code>). For YubiKey, <code>IdentityFile</code> must point to the public key file, and <code>ssh</code> will select the appropriate private key from those available via ssh-agent. To prevent <code>ssh</code> from trying all keys in the agent, use <code>IdentitiesOnly yes</code> along with one or more <code>-i</code> or <code>IdentityFile</code> options for the target host.</p> <p>To reiterate, with <code>IdentitiesOnly yes</code>, <code>ssh</code> will not enumerate public keys loaded into <code>ssh-agent</code> or <code>gpg-agent</code>. This means public-key authentication will not proceed unless explicitly named by <code>ssh -i [identity_file]</code> or in <code>.ssh/config</code> on a per-host basis.</p> <p>In the case of YubiKey usage, to extract the public key from the ssh agent:</p> <pre><code>ssh-add -L | grep \"cardno:000605553211\" &gt; ~/.ssh/id_rsa_yubikey.pub\n</code></pre> <p>Then explicitly associate this YubiKey-stored key for used with a host, <code>github.com</code> for example, as follows:</p> <pre><code>$ cat &lt;&lt; EOF &gt;&gt; ~/.ssh/config\nHost github.com\n    IdentitiesOnly yes\n    IdentityFile ~/.ssh/id_rsa_yubikey.pub\nEOF\n</code></pre> <p>Connect with public key authentication:</p> <pre><code>$ ssh git@github.com -vvv\n[...]\ndebug2: key: cardno:000605553211 (0x1234567890),\ndebug1: Authentications that can continue: publickey\ndebug3: start over, passed a different list publickey\ndebug3: preferred gssapi-keyex,gssapi-with-mic,publickey,keyboard-interactive,password\ndebug3: authmethod_lookup publickey\ndebug3: remaining preferred: keyboard-interactive,password\ndebug3: authmethod_is_enabled publickey\ndebug1: Next authentication method: publickey\ndebug1: Offering RSA public key: cardno:000605553211\ndebug3: send_pubkey_test\ndebug2: we sent a publickey packet, wait for reply\ndebug1: Server accepts key: pkalg ssh-rsa blen 535\ndebug2: input_userauth_pk_ok: fp e5:de:a5:74:b1:3e:96:9b:85:46:e7:28:53:b4:82:c3\ndebug3: sign_and_send_pubkey: RSA e5:de:a5:74:b1:3e:96:9b:85:46:e7:28:53:b4:82:c3\ndebug1: Authentication succeeded (publickey).\n[...]\n</code></pre> <p>Tip</p> <p>To make multiple connections or securely transfer many files, use the ControlMaster ssh option.</p>"},{"location":"windows/yubikey/drduh.html#import-ssh-keys","title":"Import SSH keys","text":"<p>If there are existing SSH keys to make available via <code>gpg-agent</code>, they will need to be imported. Then, remove the original private keys. When importing the key, <code>gpg-agent</code> uses the key filename as the label - this makes it easier to follow where the key originated from. In this example, we're starting with just the YubiKey in place and importing <code>~/.ssh/id_rsa</code>:</p> <pre><code>$ ssh-add -l\n4096 SHA256:... cardno:00060123456 (RSA)\n\n$ ssh-add ~/.ssh/id_rsa &amp;&amp; rm ~/.ssh/id_rsa\n</code></pre> <p>When invoking <code>ssh-add</code>, a prompt for the SSH key passphrase will appear, then the <code>pinentry</code> program will prompt and confirm a new passphrase to encrypt the converted key within the GnuPG key store.</p> <p>The migrated key will be listed in <code>ssh-add -l</code>:</p> <pre><code>$ ssh-add -l\n4096 SHA256:... cardno:00060123456 (RSA)\n2048 SHA256:... /Users/username/.ssh/id_rsa (RSA)\n</code></pre> <p>To show the keys with MD5 fingerprints, as used by <code>gpg-connect-agent</code>'s <code>KEYINFO</code> and <code>DELETE_KEY</code> commands:</p> <pre><code>$ ssh-add -E md5 -l\n4096 MD5:... cardno:00060123456 (RSA)\n2048 MD5:... /Users/username/.ssh/id_rsa (RSA)\n</code></pre> <p>When using the key <code>pinentry</code> will be invoked to request the key passphrase. The passphrase will be cached for up to 10 idle minutes between uses, up to a maximum of 2 hours.</p>"},{"location":"windows/yubikey/drduh.html#ssh-agent-forwarding","title":"SSH agent forwarding","text":"<p>Warning</p> <p>SSH Agent Forwarding can add additional risk - proceed with caution!</p> <p>There are two methods for ssh-agent forwarding, one is provided by OpenSSH and the other is provided by GnuPG.</p> <p>The latter one may be more insecure as raw socket is just forwarded (not like <code>S.gpg-agent.extra</code> with only limited functionality; if <code>ForwardAgent</code> implemented by OpenSSH is just forwarding the raw socket, then they are insecure to the same degree). But for the latter one, one convenience is that one may forward once and use this agent everywhere in the remote. So again, proceed with caution!</p> <p>For example, tmux does not have environment variables such as <code>$SSH_AUTH_SOCK</code> when connecting to remote hosts and attaching an existing session. For each shell, find the socket and <code>export SSH_AUTH_SOCK=/tmp/ssh-agent-xxx/xxxx.socket</code>. However, with <code>S.gpg-agent.ssh</code> in a fixed place, it can be used as the ssh-agent in shell rc files.</p>"},{"location":"windows/yubikey/drduh.html#use-ssh-agent","title":"Use ssh-agent","text":"<p>You should now be able to use <code>ssh -A remote</code> on the local host to log into remote host, and should then be able to use YubiKey as if it were connected to the remote host. For example, using e.g. <code>ssh-add -l</code> on that remote host will show the public key from the YubiKey (<code>cardno:</code>). Always use <code>ForwardAgent yes</code> only for a single host, never for all servers.</p>"},{"location":"windows/yubikey/drduh.html#use-sgpg-agentssh","title":"Use S.gpg-agent.ssh","text":"<p>First you need to go through GnuPG agent forwarding), know the conditions for gpg-agent forwarding and know the location of <code>S.gpg-agent.ssh</code> on both the local and the remote.</p> <p>You may use the command:</p> <pre><code>$ gpgconf --list-dirs agent-ssh-socket\n</code></pre> <p>Edit <code>.ssh/config</code> to add the remote host:</p> <pre><code>Host\n  Hostname remote-host.tld\n  StreamLocalBindUnlink yes\n  RemoteForward /run/user/1000/gnupg/S.gpg-agent.ssh /run/user/1000/gnupg/S.gpg-agent.ssh\n  # RemoteForward [remote socket] [local socket]\n  # Note that ForwardAgent is not wanted here!\n</code></pre> <p>After successfully ssh into the remote host, confirm <code>/run/user/1000/gnupg/S.gpg-agent.ssh</code> exists.</p> <p>Then in the remote you can type in command line or configure in the shell rc file with:</p> <pre><code>export SSH_AUTH_SOCK=\"/run/user/$UID/gnupg/S.gpg-agent.ssh\"\n</code></pre> <p>After sourcing the shell rc file, <code>ssh-add -l</code> will return the correct public key.</p> <p>Note</p> <p>In this process no gpg-agent in the remote is involved, hence <code>gpg-agent.conf</code> in the remote is of no use. Also pinentry is invoked locally.</p>"},{"location":"windows/yubikey/drduh.html#chained-forwarding","title":"Chained forwarding","text":"<p>If you use <code>ssh-agent</code> provided by OpenSSH and want to forward it into a third box, you can just <code>ssh -A third</code> on the remote.</p> <p>Meanwhile, if you use <code>S.gpg-agent.ssh</code>, assume you have gone through the steps above and have <code>S.gpg-agent.ssh</code> on the remote, and you would like to forward this agent into a third box, first you may need to configure <code>sshd_config</code> and <code>SSH_AUTH_SOCK</code> of third in the same way as remote, then in the ssh config of remote, add the following lines</p> <pre><code>Host third\n  Hostname third-host.tld\n  StreamLocalBindUnlink yes\n  RemoteForward /run/user/1000/gnupg/S.gpg-agent.ssh /run/user/1000/gnupg/S.gpg-agent.ssh\n  #RemoteForward [remote socket] [local socket]\n  #Note that ForwardAgent is not wanted here!\n</code></pre> <p>The path must be set according to <code>gpgconf --list-dirs agent-ssh-socket</code> on remote and third hosts.</p>"},{"location":"windows/yubikey/drduh.html#github","title":"GitHub","text":"<p>YubiKey can be used to sign commits and tags, and authenticate SSH to GitHub when configured in Settings.</p> <p>Configure a signing key:</p> <pre><code>git config --global user.signingkey $KEYID\n</code></pre> <p>Important</p> <p>The <code>user.email</code> option must match the email address associated with the PGP identity.</p> <p>To sign commits or tags, use the <code>-S</code> option.</p> <p>Windows</p> <p>Configure authentication:</p> <pre><code>git config --global core.sshcommand \"plink -agent\"\n\ngit config --global gpg.program 'C:\\Program Files (x86)\\GnuPG\\bin\\gpg.exe'\n</code></pre> <p>Then update the repository URL to <code>git@github.com:USERNAME/repository</code></p> <p>Note</p> <p>For the error <code>gpg: signing failed: No secret key</code> - run <code>gpg --card-status</code> with YubiKey plugged in and try the git command again.</p>"},{"location":"windows/yubikey/drduh.html#gnupg-agent-forwarding","title":"GnuPG agent forwarding","text":"<p>YubiKey can be used sign git commits and decrypt files on remote hosts with GnuPG Agent Forwarding. To ssh through another network, especially to push to/pull from GitHub using ssh, see Remote Machines (SSH Agent forwarding).</p> <p><code>gpg-agent.conf</code> is not needed on the remote host; after forwarding, remote GnuPG directly communicates with <code>S.gpg-agent</code> without starting <code>gpg-agent</code> on the remote host.</p> <p>On the remote host, edit <code>/etc/ssh/sshd_config</code> to set <code>StreamLocalBindUnlink yes</code></p> <p>Optional</p> <p>Without root access on the remote host to edit <code>/etc/ssh/sshd_config</code>, socket located at <code>gpgconf --list-dir agent-socket</code> on the remote host will need to be removed before forwarding works. See AgentForwarding GNUPG wiki page for more information.</p> <p>Import the public key on the remote host. On the local host, copy the public keyring to the remote host:</p> <pre><code>scp ~/.gnupg/pubring.kbx remote:~/.gnupg/\n</code></pre> <p>On modern distributions, such as Fedora 30, there is no need to set <code>RemoteForward</code> in <code>~/.ssh/config</code></p>"},{"location":"windows/yubikey/drduh.html#legacy-distributions","title":"Legacy distributions","text":"<p>On the local host, run:</p> <pre><code>gpgconf --list-dirs agent-extra-socket\n</code></pre> <p>This should return a path to agent-extra-socket - <code>/run/user/1000/gnupg/S.gpg-agent.extra</code> - though on older Linux distros (and macOS) it may be <code>/home/&lt;user&gt;/.gnupg/S/gpg-agent.extra</code></p> <p>Find the agent socket on the remote host:</p> <pre><code>gpgconf --list-dirs agent-socket\n</code></pre> <p>This should return a path such as <code>/run/user/1000/gnupg/S.gpg-agent</code></p> <p>Finally, enable agent forwarding for a given host by adding the following to the local host's <code>~/.ssh/config</code> (agent sockets may differ):</p> <pre><code>Host\n  Hostname remote-host.tld\n  StreamLocalBindUnlink yes\n  RemoteForward /run/user/1000/gnupg/S.gpg-agent /run/user/1000/gnupg/S.gpg-agent.extra\n  #RemoteForward [remote socket] [local socket]\n</code></pre> <p>It may be necessary to edit <code>gpg-agent.conf</code> on the local host to add the following information:</p> <pre><code>pinentry-program /usr/bin/pinentry-gtk-2\nextra-socket /run/user/1000/gnupg/S.gpg-agent.extra\n</code></pre> <p>Note</p> <p>The pinentry program starts on the local host, not remote.</p> <p>Important</p> <p>Any pinentry program except <code>pinentry-tty</code> or <code>pinentry-curses</code> may be used. This is because local <code>gpg-agent</code> may start headlessly (by systemd without <code>$GPG_TTY</code> set locally telling which tty it is on), thus failed to obtain the pin. Errors on the remote may be misleading saying that there is IO Error. (Yes, internally there is actually an IO Error since it happens when writing to/reading from tty while finding no tty to use, but for end users this is not friendly.)</p> <p>See Issue 85 for more information and troubleshooting.</p>"},{"location":"windows/yubikey/drduh.html#chained-gnupg-agent-forwarding","title":"Chained GnuPG agent forwarding","text":"<p>Assume you have gone through the steps above and have <code>S.gpg-agent</code> on the remote, and you would like to forward this agent into a third box, first you may need to configure <code>sshd_config</code> of third in the same way as remote, then in the ssh config of remote, add the following lines:</p> <pre><code>Host third\n  Hostname third-host.tld\n  StreamLocalBindUnlink yes\n  RemoteForward /run/user/1000/gnupg/S.gpg-agent /run/user/1000/gnupg/S.gpg-agent\n  #RemoteForward [remote socket] [local socket]\n</code></pre> <p>You should change the path according to <code>gpgconf --list-dirs agent-socket</code> on remote and third.</p> <p>Note</p> <p>On local you have <code>S.gpg-agent.extra</code> whereas on remote and third, you only have <code>S.gpg-agent</code></p>"},{"location":"windows/yubikey/drduh.html#using-multiple-yubikeys","title":"Using multiple YubiKeys","text":"<p>When a GnuPG key is added to YubiKey using <code>keytocard</code>, the key is deleted from the keyring and a stub is added, pointing to the YubiKey. The stub identifies the GnuPG key ID and YubiKey serial number.</p> <p>When a Subkey is added to an additional YubiKey, the stub is overwritten and will now point to the latest YubiKey. GnuPG will request a specific YubiKey by serial number, as referenced by the stub, and will not recognize another YubiKey with a different serial number.</p> <p>To scan an additional YubiKey and recreate the correct stub:</p> <pre><code>gpg-connect-agent \"scd serialno\" \"learn --force\" /bye\n</code></pre> <p>Alternatively, use a script to delete the GnuPG shadowed key, where the card serial number is stored (see GnuPG #T2291):</p> <pre><code>cat &gt;&gt; ~/scripts/remove-keygrips.sh &lt;&lt;EOF\n#!/usr/bin/env bash\n(( $# )) || { echo \"Specify a key.\" &gt;&amp;2; exit 1; }\nKEYGRIPS=$(gpg --with-keygrip --list-secret-keys \"$@\" | awk '/Keygrip/ { print $3 }')\nfor keygrip in $KEYGRIPS\ndo\n    rm \"$HOME/.gnupg/private-keys-v1.d/$keygrip.key\" 2&gt; /dev/null\ndone\n\ngpg --card-status\nEOF\n\nchmod +x ~/scripts/remove-keygrips.sh\n\n~/scripts/remove-keygrips.sh $KEYID\n</code></pre> <p>See discussion in Issues #19 and #112 for more information and troubleshooting steps.</p>"},{"location":"windows/yubikey/drduh.html#email","title":"Email","text":"<p>YubiKey can be used to decrypt and sign emails and attachments using Thunderbird, Enigmail and Mutt. Thunderbird supports OAuth 2 authentication and can be used with Gmail. See this EFF guide for more information. Mutt has OAuth 2 support since version 2.0.</p>"},{"location":"windows/yubikey/drduh.html#thunderbird","title":"Thunderbird","text":"<p>Follow instructions on the mozilla wiki to setup your YubiKey with your thunderbird client using the external gpg provider.</p> <p>Important</p> <p>Thunderbird fails to decrypt emails if the ASCII <code>armor</code> option is enabled in your <code>~/.gnupg/gpg.conf</code>. If you see the error <code>gpg: [don't know]: invalid packet (ctb=2d)</code> or <code>message cannot be decrypted (there are unknown problems with this encrypted message)</code> simply remove this option from your config file.</p>"},{"location":"windows/yubikey/drduh.html#mailvelope","title":"Mailvelope","text":"<p>Mailvelope allows YubiKey to be used with Gmail and others.</p> <p>Important</p> <p>Mailvelope does not work with the <code>throw-keyids</code> option set in <code>gpg.conf</code></p> <p>On macOS, install gpgme using Homebrew:</p> <pre><code>brew install gpgme\n</code></pre> <p>To allow Chrome to run gpgme, edit <code>~/Library/Application\\ Support/Google/Chrome/NativeMessagingHosts/gpgmejson.json</code> to add:</p> <pre><code>{\n    \"name\": \"gpgmejson\",\n    \"description\": \"Integration with GnuPG\",\n    \"path\": \"/usr/local/bin/gpgme-json\",\n    \"type\": \"stdio\",\n    \"allowed_origins\": [\n        \"chrome-extension://kajibbejlbohfaggdiogboambcijhkke/\"\n    ]\n}\n</code></pre> <p>Edit the default path to allow Chrome to find GnuPG:</p> <pre><code>sudo launchctl config user path /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n</code></pre> <p>Finally, install the Mailvelope extension from the Chrome web store.</p>"},{"location":"windows/yubikey/drduh.html#mutt","title":"Mutt","text":"<p>Mutt has both CLI and TUI interfaces - the latter provides powerful functions for processing email. In addition, PGP can be integrated such that cryptographic operations can be done without leaving TUI.</p> <p>To enable GnuPG support, copy <code>/usr/share/doc/mutt/samples/gpg.rc</code></p> <p>Edit the file to enable options <code>pgp_default_key</code>, <code>pgp_sign_as</code> and <code>pgp_autosign</code></p> <p><code>source</code> the file in <code>muttrc</code></p> <p>Important</p> <p><code>pinentry-tty</code> set as the pinentry program in <code>gpg-agent.conf</code> is reported to cause problems with Mutt TUI, because it uses curses. It is recommended to use <code>pinentry-curses</code> or other graphic pinentry program instead.</p>"},{"location":"windows/yubikey/drduh.html#keyserver","title":"Keyserver","text":"<p>Public keys can be uploaded to a public server for discoverability:</p> <pre><code>gpg --send-key $KEYID\n\ngpg --keyserver keys.gnupg.net --send-key $KEYID\n\ngpg --keyserver hkps://keyserver.ubuntu.com:443 --send-key $KEYID\n</code></pre> <p>Or if uploading to keys.openpgp.org:</p> <pre><code>gpg --send-key $KEYID | curl -T - https://keys.openpgp.org\n</code></pre> <p>The public key URL can also be added to YubiKey (based on Shaw 2003):</p> <pre><code>URL=\"hkps://keyserver.ubuntu.com:443/pks/lookup?op=get&amp;search=${KEYID}\"\n</code></pre> <p>Edit YubiKey with <code>gpg --edit-card</code> and the Admin PIN:</p> <pre><code>gpg/card&gt; admin\n\ngpg/card&gt; url\nURL to retrieve public key: hkps://keyserver.ubuntu.com:443/pks/lookup?op=get&amp;search=0xFF00000000000000\n\ngpg/card&gt; quit\n</code></pre>"},{"location":"windows/yubikey/drduh.html#updating-keys","title":"Updating keys","text":"<p>PGP does not provide forward secrecy, meaning a compromised key may be used to decrypt all past messages. Although keys stored on YubiKey are more difficult to exploit, it is not impossible: the key and PIN could be physically compromised, or a vulnerability may be discovered in firmware or in the random number generator used to create keys, for example. Therefore, it is recommended practice to rotate Subkeys periodically.</p> <p>When a Subkey expires, it can either be renewed or replaced. Both actions require access to the Certify key.</p> <ul> <li> <p>Renewing Subkeys by updating expiration indicates continued possession of the Certify key and is more convenient.</p> </li> <li> <p>Replacing Subkeys is less convenient but potentially more secure: the new Subkeys will not be able to decrypt previous messages, authenticate with SSH, etc. Contacts will need to receive the updated public key and any encrypted secrets need to be decrypted and re-encrypted to new Subkeys to be usable. This process is functionally equivalent to losing the YubiKey and provisioning a new one.</p> </li> </ul> <p>Neither rotation method is superior and it is up to personal philosophy on identity management and individual threat modeling to decide which one to use, or whether to expire Subkeys at all. Ideally, Subkeys would be ephemeral: used only once for each unique encryption, signature and authentication event, however in practice that is not really practical nor worthwhile with YubiKey. Advanced users may dedicate an air-gapped machine for frequent credential rotation.</p> <p>To renew or rotate Subkeys, follow the same process as generating keys: boot to a secure environment, install required software and disable networking.</p> <p>Connect the portable storage device with the Certify key and identify the disk label.</p> <p>Decrypt and mount the encrypted volume:</p> <pre><code>sudo cryptsetup luksOpen /dev/sdc1 gnupg-secrets\n\nsudo mkdir /mnt/encrypted-storage\n\nsudo mount /dev/mapper/gnupg-secrets /mnt/encrypted-storage\n</code></pre> <p>Mount the non-encrypted public partition:</p> <pre><code>sudo mkdir /mnt/public\n\nsudo mount /dev/sdc2 /mnt/public\n</code></pre> <p>Copy the original private key materials to a temporary working directory:</p> <pre><code>export GNUPGHOME=$(mktemp -d -t gnupg-$(date +%Y-%m-%d)-XXXXXXXXXX)\n\ncd $GNUPGHOME\n\ncp -avi /mnt/encrypted-storage/gnupg-*/* $GNUPGHOME\n</code></pre> <p>Confirm the identity is available, set the key id and fingerprint:</p> <pre><code>gpg -K\n\nexport KEYID=$(gpg -k --with-colons \"$IDENTITY\" | awk -F: '/^pub:/ { print $5; exit }')\n\nexport KEYFP=$(gpg -k --with-colons \"$IDENTITY\" | awk -F: '/^fpr:/ { print $10; exit }')\n\necho $KEYID $KEYFP\n</code></pre> <p>Recall the Certify key passphrase and set it, for example:</p> <pre><code>export CERTIFY_PASS=ABCD-0123-IJKL-4567-QRST-UVWX\n</code></pre>"},{"location":"windows/yubikey/drduh.html#renew-subkeys","title":"Renew Subkeys","text":"<p>Determine the updated expiration, for example:</p> <pre><code>export EXPIRATION=2026-09-01\n\nexport EXPIRATION=2y\n</code></pre> <p>Renew the Subkeys:</p> <pre><code>echo \"$CERTIFY_PASS\" | gpg --batch --pinentry-mode=loopback \\\n  --passphrase-fd 0 --quick-set-expire \"$KEYFP\" \"$EXPIRATION\" \\\n  $(gpg -K --with-colons | awk -F: '/^fpr:/ { print $10 }' | tail -n \"+2\" | tr \"\\n\" \" \")\n</code></pre> <p>Export the updated public key:</p> <pre><code>gpg --armor --export $KEYID | sudo tee /mnt/public/$KEYID-$(date +%F).asc\n</code></pre> <p>Transfer the public key to the destination host and import it:</p> <pre><code>gpg --import /mnt/public/*.asc\n</code></pre> <p>Alternatively, publish to a public key server and download it:</p> <pre><code>gpg --send-key $KEYID\n\ngpg --recv $KEYID\n</code></pre> <p>The validity of the GnuPG identity will be extended, allowing it to be used again for encryption and signature operations.</p> <p>The SSH public key does not need to be updated on remote hosts.</p>"},{"location":"windows/yubikey/drduh.html#rotate-subkeys","title":"Rotate Subkeys","text":"<p>Follow the original procedure to Create Subkeys.</p> <p>Previous Subkeys can be deleted from the identity.</p> <p>Finish by transfering new Subkeys to YubiKey.</p> <p>Copy the new temporary working directory to encrypted storage, which is still mounted:</p> <pre><code>sudo cp -avi $GNUPGHOME /mnt/encrypted-storage\n</code></pre> <p>Unmount and close the encrypted volume:</p> <pre><code>sudo umount /mnt/encrypted-storage\n\nsudo cryptsetup luksClose gnupg-secrets\n</code></pre> <p>Export the updated public key:</p> <pre><code>sudo mkdir /mnt/public\n\nsudo mount /dev/sdc2 /mnt/public\n\ngpg --armor --export $KEYID | sudo tee /mnt/public/$KEYID-$(date +%F).asc\n\nsudo umount /mnt/public\n</code></pre> <p>Remove the storage device and follow the original steps to transfer new Subkeys (<code>4</code>, <code>5</code> and <code>6</code>) to YubiKey, replacing existing ones.</p> <p>Reboot or securely erase the GnuPG temporary working directory.</p>"},{"location":"windows/yubikey/drduh.html#reset-yubikey","title":"Reset YubiKey","text":"<p>If PIN attempts are exceeded, the YubiKey is locked and must be Reset and set up again using the encrypted backup.</p> <p>Copy the following to a file and run <code>gpg-connect-agent -r $file</code> to lock and terminate the card. Then re-insert YubiKey to complete reset.</p> <pre><code>/hex\nscd serialno\nscd apdu 00 20 00 81 08 40 40 40 40 40 40 40 40\nscd apdu 00 20 00 81 08 40 40 40 40 40 40 40 40\nscd apdu 00 20 00 81 08 40 40 40 40 40 40 40 40\nscd apdu 00 20 00 81 08 40 40 40 40 40 40 40 40\nscd apdu 00 20 00 83 08 40 40 40 40 40 40 40 40\nscd apdu 00 20 00 83 08 40 40 40 40 40 40 40 40\nscd apdu 00 20 00 83 08 40 40 40 40 40 40 40 40\nscd apdu 00 20 00 83 08 40 40 40 40 40 40 40 40\nscd apdu 00 e6 00 00\nscd apdu 00 44 00 00\n/echo Card has been successfully reset.\n/bye\n</code></pre> <p>Or use <code>ykman</code> (sometimes in <code>~/.local/bin/</code>):</p> <pre><code>$ ykman openpgp reset\nWARNING! This will delete all stored OpenPGP keys and data and restore factory settings? [y/N]: y\nResetting OpenPGP data, don't remove your YubiKey...\nSuccess! All data has been cleared and default PINs are set.\nPIN:         123456\nReset code:  NOT SET\nAdmin PIN:   12345678\n</code></pre>"},{"location":"windows/yubikey/drduh.html#optional-hardening","title":"Optional hardening","text":"<p>The following steps may improve the security and privacy of YubiKey.</p>"},{"location":"windows/yubikey/drduh.html#improving-entropy","title":"Improving entropy","text":"<p>Generating cryptographic keys requires high-quality randomness, measured as entropy. Most operating systems use software-based pseudorandom number generators or CPU-based hardware random number generators (HRNG).</p> <p>Optionally, a device such as OneRNG may be used to increase the speed and possibly the quality of available entropy.</p> <p>Before creating keys, configure rng-tools:</p> <pre><code>sudo apt -y install at rng-tools python3-gnupg openssl\n\nwget https://github.com/OneRNG/onerng.github.io/raw/master/sw/onerng_3.7-1_all.deb\n</code></pre> <p>Verify the package:</p> <pre><code>sha256sum onerng_3.7-1_all.deb\n</code></pre> <p>The value must match:</p> <pre><code>b7cda2fe07dce219a95dfeabeb5ee0f662f64ba1474f6b9dddacc3e8734d8f57\n</code></pre> <p>Install the package:</p> <pre><code>sudo dpkg -i onerng_3.7-1_all.deb\n\necho \"HRNGDEVICE=/dev/ttyACM0\" | sudo tee /etc/default/rng-tools\n</code></pre> <p>Insert the device and restart rng-tools:</p> <pre><code>sudo atd\n\nsudo service rng-tools restart\n</code></pre>"},{"location":"windows/yubikey/drduh.html#enable-kdf","title":"Enable KDF","text":"<p>Note</p> <p>This feature may not be compatible with older GnuPG versions, especially mobile clients. These incompatible clients will not function because the PIN will always be rejected.</p> <p>This step must be completed before changing PINs or moving keys or an error will occur: <code>gpg: error for setup KDF: Conditions of use not satisfied</code></p> <p>Key Derived Function (KDF) enables YubiKey to store the hash of PIN, preventing the PIN from being passed as plain text.</p> <p>Enable KDF using the default Admin PIN of <code>12345678</code>:</p> <pre><code>gpg --command-fd=0 --pinentry-mode=loopback --card-edit &lt;&lt;EOF\nadmin\nkdf-setup\n12345678\nEOF\n</code></pre>"},{"location":"windows/yubikey/drduh.html#network-considerations","title":"Network considerations","text":"<p>This section is primarily focused on Debian / Ubuntu based systems, but the same concept applies to any system connected to a network.</p> <p>Whether you're using a VM, installing on dedicated hardware, or running a Live OS temporarily, start without a network connection and disable any unnecessary services listening on all interfaces before connecting to the network.</p> <p>The reasoning for this is because services like cups or avahi can be listening by default. While this isn't an immediate problem it simply broadens the attack surface. Not everyone will have a dedicated subnet or trusted network equipment they can control, and for the purposes of this guide, these steps treat any network as untrusted / hostile.</p> <p>Disable Listening Services</p> <ul> <li>Ensures only essential network services are running</li> <li>If the service doesn't exist you'll get a \"Failed to stop\" which is fine</li> <li>Only disable <code>Bluetooth</code> if you don't need it</li> </ul> <pre><code>sudo systemctl stop bluetooth exim4 cups avahi avahi-daemon sshd\n</code></pre> <p>Firewall</p> <p>Enable a basic firewall policy of deny inbound, allow outbound. Note that Debian does not come with a firewall, simply disabling the services in the previous step is fine. The following options have Ubuntu and similar systems in mind.</p> <p>On Ubuntu, <code>ufw</code> is built in and easy to enable:</p> <pre><code>sudo ufw enable\n</code></pre> <p>On systems without <code>ufw</code>, <code>nftables</code> is replacing <code>iptables</code>. The nftables wiki has examples for a baseline deny inbound, allow outbound policy. The <code>fw.inet.basic</code> policy covers both IPv4 and IPv6.</p> <p>(Remember to download this README and any other resources to another external drive when creating the bootable media, to have this information ready to use offline)</p> <p>Regardless of which policy you use, write the contents to a file (e.g. <code>nftables.conf</code>) and apply the policy with the following comand:</p> <pre><code>sudo nft -f ./nftables.conf\n</code></pre> <p>Review the System State</p> <p><code>NetworkManager</code> should be the only listening service on port 68/udp to obtain a DHCP lease (and 58/icmp6 if you have IPv6).</p> <p>If you want to look at every process's command line arguments you can use <code>ps axjf</code>. This prints a process tree which may have a large number of lines but should be easy to read on a live image or fresh install.</p> <pre><code>sudo ss -anp -A inet    # Dump all network state information\nps axjf                 # List all processes in a process tree\nps aux                  # BSD syntax, list all processes but no process tree\n</code></pre> <p>If you find any additional processes listening on the network that aren't needed, take note and disable them with one of the following:</p> <pre><code>sudo systemctl stop &lt;process-name&gt;                      # Stops services managed by systemctl\nsudo pkill -f '&lt;process-name-or-command-line-string&gt;'   # Terminate the process by matching it's command line string\npgrep -f '&lt;process-name-or-command-line-string&gt;'        # Obtain the PID\nsudo kill &lt;pid&gt;                                         # Terminate the process via its PID\n</code></pre> <p>Now connect to a network.</p>"},{"location":"windows/yubikey/drduh.html#notes","title":"Notes","text":"<ol> <li> <p>YubiKey has two configurations, invoked with either a short or long press. By default, the short-press mode is configured for HID OTP; a brief touch will emit an OTP string starting with <code>cccccccc</code>. OTP mode can be swapped to the second configuration via the YubiKey Personalization tool or disabled entirely using YubiKey Manager: <code>ykman config usb -d OTP</code></p> </li> <li> <p>Using YubiKey for GnuPG does not prevent use of other features, such as WebAuthn and OTP.</p> </li> <li> <p>Add additional identities to a Certify key with the <code>adduid</code> command during setup, then trust it ultimately with <code>trust</code> and <code>5</code> to configure for use.</p> </li> <li> <p>To switch between YubiKeys, remove the first YubiKey and restart gpg-agent, ssh-agent and pinentry with <code>pkill \"gpg-agent|ssh-agent|pinentry\" ; eval $(gpg-agent --daemon --enable-ssh-support)</code> then insert the other YubiKey and run <code>gpg-connect-agent updatestartuptty /bye</code></p> </li> <li> <p>To use YubiKey on multiple computers, import the corresponding public keys, then confirm YubiKey is visible with <code>gpg --card-status</code>. Trust the imported public keys ultimately with <code>trust</code> and <code>5</code>, then <code>gpg --list-secret-keys</code> will show the correct and trusted key.</p> </li> </ol>"},{"location":"windows/yubikey/drduh.html#troubleshooting","title":"Troubleshooting","text":"<ul> <li> <p>Use <code>man gpg</code> to understand GnuPG options and command-line flags.</p> </li> <li> <p>To get more information on potential errors, restart the <code>gpg-agent</code> process with debug output to the console with <code>pkill gpg-agent; gpg-agent --daemon --no-detach -v -v --debug-level advanced --homedir ~/.gnupg</code>.</p> </li> <li> <p>A lot of issues can be fixed by removing and re-inserting YubiKey, or restarting the <code>gpg-agent</code> process.</p> </li> <li> <p>If you receive the error, <code>Yubikey core error: no yubikey present</code> - make sure the YubiKey is inserted correctly. It should blink once when plugged in.</p> </li> <li> <p>If you still receive the error, <code>Yubikey core error: no yubikey present</code> - you likely need to install newer versions of yubikey-personalize as outlined in Install software.</p> </li> <li> <p>If you see <code>General key info..: [none]</code> in card status output - import the public key.</p> </li> <li> <p>If you receive the error, <code>gpg: decryption failed: secret key not available</code> - you likely need to install GnuPG version 2.x. Another possibility is that there is a problem with the PIN, e.g., it is too short or blocked.</p> </li> <li> <p>If you receive the error, <code>Yubikey core error: write error</code> - YubiKey is likely locked. Install and run yubikey-personalization-gui to unlock it.</p> </li> <li> <p>If you receive the error, <code>Key does not match the card's capability</code> - you likely need to use 2048-bit RSA key sizes.</p> </li> <li> <p>If you receive the error, <code>sign_and_send_pubkey: signing failed: agent refused operation</code> - make sure you replaced <code>ssh-agent</code> with <code>gpg-agent</code> as noted above.</p> </li> <li> <p>If you still receive the error, <code>sign_and_send_pubkey: signing failed: agent refused operation</code> - run the command <code>gpg-connect-agent updatestartuptty /bye</code></p> </li> <li> <p>If you still receive the error, <code>sign_and_send_pubkey: signing failed: agent refused operation</code> - edit <code>~/.gnupg/gpg-agent.conf</code> to set a valid <code>pinentry</code> program path. <code>gpg: decryption failed: No secret key</code> could also indicate an invalid <code>pinentry</code> path</p> </li> <li> <p>If you still receive the error, <code>sign_and_send_pubkey: signing failed: agent refused operation</code> - it is a known issue that openssh 8.9p1 and higher has issues with YubiKey. Adding <code>KexAlgorithms -sntrup761x25519-sha512@openssh.com</code> to <code>/etc/ssh/ssh_config</code> often resolves the issue.</p> </li> <li> <p>If you receive the error, <code>The agent has no identities</code> from <code>ssh-add -L</code>, make sure you have installed and started <code>scdaemon</code></p> </li> <li> <p>If you receive the error, <code>Error connecting to agent: No such file or directory</code> from <code>ssh-add -L</code>, the UNIX file socket that the agent uses for communication with other processes may not be set up correctly. On Debian, try <code>export SSH_AUTH_SOCK=\"/run/user/$UID/gnupg/S.gpg-agent.ssh\"</code>. Also see that <code>gpgconf --list-dirs agent-ssh-socket</code> is returning single path, to existing <code>S.gpg-agent.ssh</code> socket.</p> </li> <li> <p>If you receive the error, <code>Permission denied (publickey)</code>, increase ssh verbosity with the <code>-v</code> flag and verify the public key from the card is being offered: <code>Offering public key: RSA SHA256:abcdefg... cardno:00060123456</code>. If it is, verify the correct user the target system - not the user on the local system. Otherwise, be sure <code>IdentitiesOnly</code> is not enabled for this host.</p> </li> <li> <p>If SSH authentication still fails - add up to 3 <code>-v</code> flags to the <code>ssh</code> command to increase verbosity.</p> </li> <li> <p>If it still fails, it may be useful to stop the background <code>sshd</code> daemon process service on the server (e.g. using <code>sudo systemctl stop sshd</code>) and instead start it in the foreground with extensive debugging output, using <code>/usr/sbin/sshd -eddd</code>. Note that the server will not fork and will only process one connection, therefore has to be re-started after every <code>ssh</code> test.</p> </li> <li> <p>If you receive the error, <code>Please insert the card with serial number</code> see Using Multiple Keys</p> </li> <li> <p>If you receive the error, <code>There is no assurance this key belongs to the named user</code> or <code>encryption failed: Unusable public key</code> or <code>No public key</code> use <code>gpg --edit-key</code> to set <code>trust</code> to <code>5 = I trust ultimately</code></p> </li> <li> <p>If, when you try the above command, you get the error <code>Need the secret key to do this</code> - specify trust for the key in <code>~/.gnupg/gpg.conf</code> by using the <code>trust-key [key ID]</code> directive.</p> </li> <li> <p>If, when using a previously provisioned YubiKey on a new computer with <code>pass</code>, you see the following error on <code>pass insert</code>, you need to adjust the trust associated with the key. See the note above.</p> </li> </ul> <pre><code>gpg: 0x0000000000000000: There is no assurance this key belongs to the named user\ngpg: [stdin]: encryption failed: Unusable public key\n</code></pre> <ul> <li> <p>If you receive the error, <code>gpg: 0x0000000000000000: skipped: Unusable public key</code>, <code>signing failed: Unusable secret key</code>, or <code>encryption failed: Unusable public key</code> the Subkey may be expired and can no longer be used to encrypt nor sign messages. It can still be used to decrypt and authenticate, however.</p> </li> <li> <p>If the pinentry graphical dialog does not show and this error appears: <code>sign_and_send_pubkey: signing failed: agent refused operation</code>, install the <code>dbus-user-session</code> package and restart for the <code>dbus</code> user session to be fully inherited. This is because <code>pinentry</code> complains about <code>No $DBUS_SESSION_BUS_ADDRESS found</code>, falls back to <code>curses</code> but doesn't find the expected <code>tty</code></p> </li> <li> <p>If, when you try the above <code>--card-status</code> command, you get receive the error, <code>gpg: selecting card failed: No such device</code> or <code>gpg: OpenPGP card not available: No such device</code>, it's possible that the latest release of pcscd now requires polkit rules to operate properly. Create the following file to allow users in the <code>wheel</code> group to use the card. Be sure to restart pcscd when you're done to allow the new rules to take effect.</p> </li> </ul> <pre><code>cat &lt;&lt; EOF &gt;  /etc/polkit-1/rules.d/99-pcscd.rules\npolkit.addRule(function(action, subject) {\n        if (action.id == \"org.debian.pcsc-lite.access_card\" &amp;&amp;\n                subject.isInGroup(\"wheel\")) {\n                return polkit.Result.YES;\n        }\n});\npolkit.addRule(function(action, subject) {\n        if (action.id == \"org.debian.pcsc-lite.access_pcsc\" &amp;&amp;\n                subject.isInGroup(\"wheel\")) {\n                return polkit.Result.YES;\n        }\n});\nEOF\n</code></pre> <ul> <li> <p>If the public key is lost, follow this guide to recover it from YubiKey.</p> </li> <li> <p>Refer to Yubico article Troubleshooting Issues with GPG for additional guidance.</p> </li> </ul>"},{"location":"windows/yubikey/drduh.html#alternative-solutions","title":"Alternative solutions","text":"<ul> <li><code>vorburger/ed25519-sk.md</code> - use YubiKey for SSH without GnuPG</li> <li><code>smlx/piv-agent</code> - SSH and GnuPG agent which can be used with PIV devices</li> <li><code>keytotpm</code> - use GnuPG with TPM systems</li> </ul>"},{"location":"windows/yubikey/drduh.html#additional-resources","title":"Additional resources","text":"<ul> <li>Yubico - PGP</li> <li>Yubico - Yubikey Personalization</li> <li>A Visual Explanation of GPG Subkeys (2022)</li> <li>dhess/nixos-yubikey</li> <li>lsasolutions/makegpg</li> <li>Trammell Hudson - Yubikey (2020)</li> <li>Yubikey forwarding SSH keys (2019)</li> <li>GPG Agent Forwarding (2018)</li> <li>Stick with security: YubiKey, SSH, GnuPG, macOS (2018)</li> <li>PGP and SSH keys on a Yubikey NEO (2015)</li> <li>Offline GnuPG Master Key and Subkeys on YubiKey NEO Smartcard (2014)</li> <li>Creating the perfect GPG keypair (2013)</li> </ul>"},{"location":"windows/yubikey/gpg-ssh.html","title":"SSH with GPG via Yubikey","text":"<p>Establish authentication with GPG between a Windows client and a Linux server via yubikey. </p>"},{"location":"windows/yubikey/gpg-ssh.html#requirements","title":"Requirements","text":"<ul> <li>Yubikey with OpenPGP capability</li> <li>Gpg4win - GPG agent for Windows</li> <li>kleopatra - Graphical interface for key management</li> <li>[optional] Pageant if you want to use PuTTY - PuTTY's agent</li> <li>SSH server with configued firewall</li> </ul>"},{"location":"windows/yubikey/gpg-ssh.html#sources","title":"Sources","text":"<ul> <li>Yubico - SSH Authentication to GitHub Using a YubiKey on Windows</li> <li>Yubico - Using Your YubiKey with OpenPGP</li> <li>My dad's notes</li> </ul>"},{"location":"windows/yubikey/gpg-ssh.html#guide","title":"Guide","text":""},{"location":"windows/yubikey/gpg-ssh.html#key-management-on-windows","title":"Key management on Windows","text":"Generate a key<pre><code>:: Arguments: name, algorythm, use, expiration\ngpg --quick-generate-key name@address.com ed25519 auth never\n</code></pre> <p>Do NOT choose to save the changes</p> <p>It will destroy the key on your computer, and it can't be retrieved from the Yubikey.</p> Copy the key to the Yubikey<pre><code>gpg --edit-key name@address.com\nkeytocard\n\n:: Enter Q to exit\n:: Do NOT save when prompted to, it will destroy the key on your computer !\n</code></pre> <p>We need to export the public key in SSH format in order to store it on the server. The easiest way is to use Kleopatra.  Open Kleopatra. The generated key should appear on the main tab. If it isn't there, click on <code>Certificates</code> at the top and <code>Refresh certificates</code>.  Double click on the certificate and, in the newly opened window, click on the <code>Subkeys</code> tab. There, you can right-click on the key to export it as an OpenSSH key. </p> <p>Lastly, the GPG agent needs to be restarted to take the key into account. You can put the following in the <code>C:\\Users\\&lt;user&gt;\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\</code> folder so it would be executed on login. </p> GPG_Starter.bat<pre><code>:: Stop existing GPG instances\ngpg-connect-agent \"KILLAGENT\" /bye\n:: Launch new instance\ngpg-connect-agent /bye\n</code></pre> <p>Here is another version that launches PuTTY:</p> launcher.bat<pre><code>:: Stop existing GPG instances\ngpg-connect-agent \"KILLAGENT\" /bye\n:: Launch new instance\ngpg-connect-agent /bye\n:: Launch PuTTY. \"start\" allows the script to close immediatly.\nstart putty.exe\n</code></pre> <p>PuTTY configuration</p> <p>If you're using PuTTY, make sure that <code>Attempt authentication using Pageant</code> is checked in Connection &gt; SSH &gt; Auth </p>"},{"location":"windows/yubikey/gpg-ssh.html#key-management-on-linux","title":"Key management on Linux","text":"<p>In your session, paste the previously exported key on a new line in <code>.ssh/authorized_keys</code>.</p>"},{"location":"windows/yubikey/gpg-ssh.html#debug","title":"Debug","text":"<p>If needed, logs can be viewed rapidly with the following command:</p> <pre><code>journalctl -u ssh -S \"year-mm-dd hh:mm:ss\"\n</code></pre> <p>Verbosity</p> <p>Log verbosity can be enhanced by tweaking the following line:</p> /etc/ssh/sshd_config<pre><code># Logging\n#SyslogFacility AUTH\nLogLevel DEBUG3\n</code></pre>"},{"location":"windows/yubikey/misc.html","title":"Miscellaneous","text":"<p>Various tips in no particular order. </p>"},{"location":"windows/yubikey/misc.html#reset-pgp-application","title":"Reset PGP application","text":"<ul> <li>Download the deprecated Yubikey Manager</li> <li>Run the following commands</li> </ul> <pre><code>cd \"C:\\Program Files\\Yubico\\YubiKey Manager\"\n.\\ykman openpgp reset\n</code></pre>"},{"location":"windows/yubikey/misc.html#set-pgp-passwords","title":"Set PGP passwords","text":"PIN<pre><code>gpg  --change-pin\n</code></pre> Personal administration code<pre><code>gpg --card-edit\nadmin\npasswd\n</code></pre>"},{"location":"windows/yubikey/misc.html#card-customization","title":"Card customization","text":"<p>You can use the <code>gpg-card</code> facility to customize your Yubikey.</p> <ul> <li><code>name</code> allows you to asign your real name to a field in the card</li> <li> <p><code>salutation</code> is used to define your genrer ? (documentation)</p> <p>Quote</p> <ul> <li>SALUTATION [--clear]SALUTChange the salutation info for the card. This info can be used by applications for a personalized greeting. The option --clear removes this data object. GnuPG does not use this info.</li> </ul> </li> </ul>"}]}